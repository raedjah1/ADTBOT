{
  "report_metadata": {
    "session_id": "26c24162-708b-4fad-934a-5789ac3c6ffb",
    "generated_at": "2025-09-08T15:09:16.195113",
    "target_url": "https://pov-reality.com/",
    "report_type": "comprehensive_security_test"
  },
  "executive_summary": {
    "total_tests_performed": 1,
    "vulnerabilities_discovered": 0,
    "elements_analyzed": 51,
    "risk_level": "LOW",
    "test_duration": "0:00:00.000002"
  },
  "vulnerability_details": [],
  "discovered_elements": [
    {
      "type": "ajax_endpoint",
      "id": "ajax_apiCall",
      "url": "https://pov-reality.com/apiCall",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://accounts.google.com/gsi/client"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_Trying to set gapi client token.",
      "url": "https://pov-reality.com/Trying to set gapi client token.",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://accounts.google.com/gsi/client"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_);if(a.access_token)if(Xt.gapi&&Xt.gapi.client&&Xt.gapi.client.setToken)try{Xt.gapi.client.setToken.call(this,a)}catch(b){_.G(",
      "url": "https://pov-reality.com/);if(a.access_token)if(Xt.gapi&&Xt.gapi.client&&Xt.gapi.client.setToken)try{Xt.gapi.client.setToken.call(this,a)}catch(b){_.G(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://accounts.google.com/gsi/client"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_The OAuth token was not passed to gapi.client, since the gapi.client library is not loaded in your page.",
      "url": "https://pov-reality.com/The OAuth token was not passed to gapi.client, since the gapi.client library is not loaded in your page.",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://accounts.google.com/gsi/client"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_https:__oauth2.googleapis.com_revoke",
      "url": "https://oauth2.googleapis.com/revoke",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://accounts.google.com/gsi/client"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_s total liability to you for all damages (other than as may be required by applicable law in cases involving personal injury) exceed the amount of fifty dollars ($50.00). The foregoing limitations will apply even if the above stated remedy fails of its essential purpose.\n * \n * **ACKNOWLEDGEMENTS:**\n * https:__appleid.cdn-apple.com_appleauth_static_jsapi_appleid_1_acknowledgements.txt\n * \n * v1.5.5\n *_\n\n!function(e,t){",
      "url": "https://pov-reality.com/s total liability to you for all damages (other than as may be required by applicable law in cases involving personal injury) exceed the amount of fifty dollars ($50.00). The foregoing limitations will apply even if the above stated remedy fails of its essential purpose. *  * **ACKNOWLEDGEMENTS:** * https:/appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/acknowledgements.txt *  * v1.5.5 */!function(e,t){",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_&&!1,Dn={API_URL:RI?",
      "url": "https://pov-reality.com/&&!1,Dn={API_URL:RI",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_https:__api.pov-reality.com",
      "url": "https://api.pov-reality.com",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,h);const u=await Zt.post(`${Dn.API_URL}${Bt.REGISTER}`,h,{headers:{",
      "url": "https://pov-reality.com/,h);const u=await Zt.post(`${Dn.API_URL}${Bt.REGISTER}`,h,{headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,n);const s=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN}`,n,{headers:{",
      "url": "https://pov-reality.com/,n);const s=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN}`,n,{headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_}}},async signInGoogle(i){try{const e={credential:i},t=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN_GOOGLE}`,e,{headers:{",
      "url": "https://pov-reality.com/}}},async signInGoogle(i){try{const e={credential:i},t=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN_GOOGLE}`,e,{headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_}}},async signInFacebook(i){try{const e=sa.email(i.email),t=sa.text(i.first_name),n=sa.text(i.last_name),s={email:e,first_name:t,last_name:n,profile_picture:i.picture?.data?.url},r=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN_FACEBOOK}`,s,{headers:{",
      "url": "https://pov-reality.com/}}},async signInFacebook(i){try{const e=sa.email(i.email),t=sa.text(i.first_name),n=sa.text(i.last_name),s={email:e,first_name:t,last_name:n,profile_picture:i.picture?.data?.url},r=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN_FACEBOOK}`,s,{headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_}}},async signInApple(i,e){try{const t={access_token:i};e&&(t.refresh_token=e);const n=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN_APPLE}`,t,{headers:{",
      "url": "https://pov-reality.com/}}},async signInApple(i,e){try{const t={access_token:i};e&&(t.refresh_token=e);const n=await Zt.post(`${Dn.API_URL}${Bt.SIGN_IN_APPLE}`,t,{headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_};const e=await Zt.get(`${Dn.API_URL}${Bt.GET_USER_PROFILE}`,{headers:{Authorization:`Token ${i}`,",
      "url": "https://pov-reality.com/};const e=await Zt.get(`${Dn.API_URL}${Bt.GET_USER_PROFILE}`,{headers:{Authorization:`Token ${i}`,",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_};const t=await Zt.post(`${Dn.API_URL}${Bt.UPDATE_USER_DETAILS}`,i,{headers:{Authorization:`Token ${e}`,",
      "url": "https://pov-reality.com/};const t=await Zt.post(`${Dn.API_URL}${Bt.UPDATE_USER_DETAILS}`,i,{headers:{Authorization:`Token ${e}`,",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_)},async checkSignInStatus(i){try{return(await Zt.get(`${Dn.API_URL}_users_auth_check-signin-status_?code=${i}`,{timeout:1e4})).data}catch(e){return console.error(",
      "url": "https://pov-reality.com/)},async checkSignInStatus(i){try{return(await Zt.get(`${Dn.API_URL}/users/auth/check-signin-status/?code=${i}`,{timeout:1e4})).data}catch(e){return console.error(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_}}},async initiateEmailVerification(i){try{const e=sa.email(i),t=await Zt.post(`${Dn.API_URL}_users_initiate-email-verification_`,{email:e},{headers:{",
      "url": "https://pov-reality.com/}}},async initiateEmailVerification(i){try{const e=sa.email(i),t=await Zt.post(`${Dn.API_URL}/users/initiate-email-verification/`,{email:e},{headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1_0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Tl&&(n.blending=this.blending),this.side!==Aa&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==l0&&(n.blendSrc=this.blendSrc),this.blendDst!==c0&&(n.blendDst=this.blendDst),this.blendEquation!==ao&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==kl&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==v_&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==nl&&(n.stencilFail=this.stencilFail),this.stencilZFail!==nl&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==nl&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!==",
      "url": "https://pov-reality.com/&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Tl&&(n.blending=this.blending),this.side!==Aa&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==l0&&(n.blendSrc=this.blendSrc),this.blendDst!==c0&&(n.blendDst=this.blendDst),this.blendEquation!==ao&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==kl&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==v_&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==nl&&(n.stencilFail=this.stencilFail),this.stencilZFail!==nl&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==nl&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!==",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,this.color=new Xt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Zs,this.combine=Cv,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=",
      "url": "https://pov-reality.com/,this.color=new Xt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Zs,this.combine=Cv,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Ln=new me,nd=new Ht;let jN=0;class zi{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError(",
      "url": "https://pov-reality.com/,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Ln=new me,nd=new Ht;let jN=0;class zi{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,this.color=new Xt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Xt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=WA,this.normalScale=new Ht(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Zs,this.combine=Cv,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=",
      "url": "https://pov-reality.com/,this.color=new Xt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Xt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=WA,this.normalScale=new Ht(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Zs,this.combine=Cv,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class tP extends ec{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type=",
      "url": "https://pov-reality.com/,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class tP extends ec{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type=",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_);n(u.buffer,c,h),u.version=c.version}}return{get:s,remove:r,update:o}}var uP=`#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif`,hP=`#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 _ ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x _ ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) _ ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) _ ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif`,dP=`#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif`,fP=`#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif`,mP=`#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif`,pP=`#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif`,gP=`#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif`,vP=`#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif`,yP=`#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j _ size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i _ size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j _ size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif`,xP=`#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif`,SP=`vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif`,EP=`vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif`,_P=`float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} __ validated`,TP=`#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) _ ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) _ ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) _ ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz _= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR _ iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 _ ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif`,bP=`#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif`,AP=`#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) _ 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) _ 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif`,RP=`#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif`,wP=`#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif`,MP=`#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif`,CP=`#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif`,LP=`#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif`,DP=`#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif`,IP=`#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif`,NP=`#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v _ maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} __ validated`,PP=`#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) _ abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) _ abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) _ abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) _ abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) _ abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) _ abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) _ ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) _ ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) _ ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) _ ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif`,OP=`vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal _= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal _= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif`,UP=`#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif`,FP=`#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif`,kP=`#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif`,BP=`#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif`,jP=",
      "url": "https://pov-reality.com/);n(u.buffer,c,h),u.version=c.version}}return{get:s,remove:r,update:o}}var uP=`#ifdef USE_ALPHAHASHif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;#endif`,hP=`#ifdef USE_ALPHAHASHconst float ALPHA_HASH_SCALE = 0.05;float hash2D( vec2 value ) {return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );}float hash3D( vec3 value ) {return hash2D( vec2( hash2D( value.xy ), value.z ) );}float getAlphaHashThreshold( vec3 position ) {float maxDeriv = max(length( dFdx( position.xyz ) ),length( dFdy( position.xyz ) ));float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );vec2 pixScales = vec2(exp2( floor( log2( pixScale ) ) ),exp2( ceil( log2( pixScale ) ) ));vec2 alpha = vec2(hash3D( floor( pixScales.x * position.xyz ) ),hash3D( floor( pixScales.y * position.xyz ) ));float lerpFactor = fract( log2( pixScale ) );float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;float a = min( lerpFactor, 1.0 - lerpFactor );vec3 cases = vec3(x * x / ( 2.0 * a * ( 1.0 - a ) ),( x - 0.5 * a ) / ( 1.0 - a ),1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) ));float threshold = ( x < ( 1.0 - a ) )? ( ( x < a ) ? cases.x : cases.y ): cases.z;return clamp( threshold , 1.0e-6, 1.0 );}#endif`,dP=`#ifdef USE_ALPHAMAPdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;#endif`,fP=`#ifdef USE_ALPHAMAPuniform sampler2D alphaMap;#endif`,mP=`#ifdef USE_ALPHATEST#ifdef ALPHA_TO_COVERAGEdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );if ( diffuseColor.a == 0.0 ) discard;#elseif ( diffuseColor.a < alphaTest ) discard;#endif#endif`,pP=`#ifdef USE_ALPHATESTuniform float alphaTest;#endif`,gP=`#ifdef USE_AOMAPfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;reflectedLight.indirectDiffuse *= ambientOcclusion;#if defined( USE_CLEARCOAT ) clearcoatSpecularIndirect *= ambientOcclusion;#endif#if defined( USE_SHEEN ) sheenSpecularIndirect *= ambientOcclusion;#endif#if defined( USE_ENVMAP ) && defined( STANDARD )float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );#endif#endif`,vP=`#ifdef USE_AOMAPuniform sampler2D aoMap;uniform float aoMapIntensity;#endif`,yP=`#ifdef USE_BATCHING#if ! defined( GL_ANGLE_multi_draw )#define gl_DrawID _gl_DrawIDuniform int _gl_DrawID;#endifuniform highp sampler2D batchingTexture;uniform highp usampler2D batchingIdTexture;mat4 getBatchingMatrix( const in float i ) {int size = textureSize( batchingTexture, 0 ).x;int j = int( i ) * 4;int x = j % size;int y = j / size;vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );return mat4( v1, v2, v3, v4 );}float getIndirectIndex( const in int i ) {int size = textureSize( batchingIdTexture, 0 ).x;int x = i % size;int y = i / size;return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );}#endif#ifdef USE_BATCHING_COLORuniform sampler2D batchingColorTexture;vec3 getBatchingColor( const in float i ) {int size = textureSize( batchingColorTexture, 0 ).x;int j = int( i );int x = j % size;int y = j / size;return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;}#endif`,xP=`#ifdef USE_BATCHINGmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );#endif`,SP=`vec3 transformed = vec3( position );#ifdef USE_ALPHAHASHvPosition = vec3( position );#endif`,EP=`vec3 objectNormal = vec3( normal );#ifdef USE_TANGENTvec3 objectTangent = vec3( tangent.xyz );#endif`,_P=`float G_BlinnPhong_Implicit( ) {return 0.25;}float D_BlinnPhong( const in float shininess, const in float dotNH ) {return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );}vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {vec3 halfDir = normalize( lightDir + viewDir );float dotNH = saturate( dot( normal, halfDir ) );float dotVH = saturate( dot( viewDir, halfDir ) );vec3 F = F_Schlick( specularColor, 1.0, dotVH );float G = G_BlinnPhong_Implicit( );float D = D_BlinnPhong( shininess, dotNH );return F * ( G * D );} // validated`,TP=`#ifdef USE_IRIDESCENCEconst mat3 XYZ_TO_REC709 = mat3( 3.2404542, -0.9692660,  0.0556434,-1.5371385,  1.8760108, -0.2040259,-0.4985314,  0.0415560,  1.0572252);vec3 Fresnel0ToIor( vec3 fresnel0 ) {vec3 sqrtF0 = sqrt( fresnel0 );return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );}vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );}float IorToFresnel0( float transmittedIor, float incidentIor ) {return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));}vec3 evalSensitivity( float OPD, vec3 shift ) {float phase = 2.0 * PI * OPD * 1.0e-9;vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );xyz /= 1.0685e-7;vec3 rgb = XYZ_TO_REC709 * xyz;return rgb;}vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {vec3 I;float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );float cosTheta2Sq = 1.0 - sinTheta2Sq;if ( cosTheta2Sq < 0.0 ) {return vec3( 1.0 );}float cosTheta2 = sqrt( cosTheta2Sq );float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );float R12 = F_Schlick( R0, 1.0, cosTheta1 );float T121 = 1.0 - R12;float phi12 = 0.0;if ( iridescenceIOR < outsideIOR ) phi12 = PI;float phi21 = PI - phi12;vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );vec3 phi23 = vec3( 0.0 );if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;vec3 phi = vec3( phi21 ) + phi23;vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );vec3 r123 = sqrt( R123 );vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );vec3 C0 = R12 + Rs;I = C0;vec3 Cm = Rs - T121;for ( int m = 1; m <= 2; ++ m ) {Cm *= r123;vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );I += Cm * Sm;}return max( I, vec3( 0.0 ) );}#endif`,bP=`#ifdef USE_BUMPMAPuniform sampler2D bumpMap;uniform float bumpScale;vec2 dHdxy_fwd() {vec2 dSTdx = dFdx( vBumpMapUv );vec2 dSTdy = dFdy( vBumpMapUv );float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;return vec2( dBx, dBy );}vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );vec3 vN = surf_norm;vec3 R1 = cross( vSigmaY, vN );vec3 R2 = cross( vN, vSigmaX );float fDet = dot( vSigmaX, R1 ) * faceDirection;vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );return normalize( abs( fDet ) * surf_norm - vGrad );}#endif`,AP=`#if NUM_CLIPPING_PLANES > 0vec4 plane;#ifdef ALPHA_TO_COVERAGEfloat distanceToPlane, distanceGradient;float clipOpacity = 1.0;#pragma unroll_loop_startfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {plane = clippingPlanes[ i ];distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;distanceGradient = fwidth( distanceToPlane ) / 2.0;clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );if ( clipOpacity == 0.0 ) discard;}#pragma unroll_loop_end#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANESfloat unionClipOpacity = 1.0;#pragma unroll_loop_startfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {plane = clippingPlanes[ i ];distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;distanceGradient = fwidth( distanceToPlane ) / 2.0;unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );}#pragma unroll_loop_endclipOpacity *= 1.0 - unionClipOpacity;#endifdiffuseColor.a *= clipOpacity;if ( diffuseColor.a == 0.0 ) discard;#else#pragma unroll_loop_startfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {plane = clippingPlanes[ i ];if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;}#pragma unroll_loop_end#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANESbool clipped = true;#pragma unroll_loop_startfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {plane = clippingPlanes[ i ];clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;}#pragma unroll_loop_endif ( clipped ) discard;#endif#endif#endif`,RP=`#if NUM_CLIPPING_PLANES > 0varying vec3 vClipPosition;uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];#endif`,wP=`#if NUM_CLIPPING_PLANES > 0varying vec3 vClipPosition;#endif`,MP=`#if NUM_CLIPPING_PLANES > 0vClipPosition = - mvPosition.xyz;#endif`,CP=`#if defined( USE_COLOR_ALPHA )diffuseColor *= vColor;#elif defined( USE_COLOR )diffuseColor.rgb *= vColor;#endif`,LP=`#if defined( USE_COLOR_ALPHA )varying vec4 vColor;#elif defined( USE_COLOR )varying vec3 vColor;#endif`,DP=`#if defined( USE_COLOR_ALPHA )varying vec4 vColor;#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )varying vec3 vColor;#endif`,IP=`#if defined( USE_COLOR_ALPHA )vColor = vec4( 1.0 );#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )vColor = vec3( 1.0 );#endif#ifdef USE_COLORvColor *= color;#endif#ifdef USE_INSTANCING_COLORvColor.xyz *= instanceColor.xyz;#endif#ifdef USE_BATCHING_COLORvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );vColor.xyz *= batchingColor.xyz;#endif`,NP=`#define PI 3.141592653589793#define PI2 6.283185307179586#define PI_HALF 1.5707963267948966#define RECIPROCAL_PI 0.3183098861837907#define RECIPROCAL_PI2 0.15915494309189535#define EPSILON 1e-6#ifndef saturate#define saturate( a ) clamp( a, 0.0, 1.0 )#endif#define whiteComplement( a ) ( 1.0 - saturate( a ) )float pow2( const in float x ) { return x*x; }vec3 pow2( const in vec3 x ) { return x*x; }float pow3( const in float x ) { return x*x*x; }float pow4( const in float x ) { float x2 = x*x; return x2*x2; }float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }highp float rand( const in vec2 uv ) {const highp float a = 12.9898, b = 78.233, c = 43758.5453;highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );return fract( sin( sn ) * c );}#ifdef HIGH_PRECISIONfloat precisionSafeLength( vec3 v ) { return length( v ); }#elsefloat precisionSafeLength( vec3 v ) {float maxComponent = max3( abs( v ) );return length( v / maxComponent ) * maxComponent;}#endifstruct IncidentLight {vec3 color;vec3 direction;bool visible;};struct ReflectedLight {vec3 directDiffuse;vec3 directSpecular;vec3 indirectDiffuse;vec3 indirectSpecular;};#ifdef USE_ALPHAHASHvarying vec3 vPosition;#endifvec3 transformDirection( in vec3 dir, in mat4 matrix ) {return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );}vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );}mat3 transposeMat3( const in mat3 m ) {mat3 tmp;tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );return tmp;}bool isPerspectiveMatrix( mat4 m ) {return m[ 2 ][ 3 ] == - 1.0;}vec2 equirectUv( in vec3 dir ) {float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;return vec2( u, v );}vec3 BRDF_Lambert( const in vec3 diffuseColor ) {return RECIPROCAL_PI * diffuseColor;}vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );}float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );} // validated`,PP=`#ifdef ENVMAP_TYPE_CUBE_UV#define cubeUV_minMipLevel 4.0#define cubeUV_minTileSize 16.0float getFace( vec3 direction ) {vec3 absDirection = abs( direction );float face = - 1.0;if ( absDirection.x > absDirection.z ) {if ( absDirection.x > absDirection.y )face = direction.x > 0.0 ? 0.0 : 3.0;elseface = direction.y > 0.0 ? 1.0 : 4.0;} else {if ( absDirection.z > absDirection.y )face = direction.z > 0.0 ? 2.0 : 5.0;elseface = direction.y > 0.0 ? 1.0 : 4.0;}return face;}vec2 getUV( vec3 direction, float face ) {vec2 uv;if ( face == 0.0 ) {uv = vec2( direction.z, direction.y ) / abs( direction.x );} else if ( face == 1.0 ) {uv = vec2( - direction.x, - direction.z ) / abs( direction.y );} else if ( face == 2.0 ) {uv = vec2( - direction.x, direction.y ) / abs( direction.z );} else if ( face == 3.0 ) {uv = vec2( - direction.z, direction.y ) / abs( direction.x );} else if ( face == 4.0 ) {uv = vec2( - direction.x, direction.z ) / abs( direction.y );} else {uv = vec2( direction.x, direction.y ) / abs( direction.z );}return 0.5 * ( uv + 1.0 );}vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {float face = getFace( direction );float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );mipInt = max( mipInt, cubeUV_minMipLevel );float faceSize = exp2( mipInt );highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;if ( face > 2.0 ) {uv.y += faceSize;face -= 3.0;}uv.x += face * faceSize;uv.x += filterInt * 3.0 * cubeUV_minTileSize;uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );uv.x *= CUBEUV_TEXEL_WIDTH;uv.y *= CUBEUV_TEXEL_HEIGHT;#ifdef texture2DGradEXTreturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;#elsereturn texture2D( envMap, uv ).rgb;#endif}#define cubeUV_r0 1.0#define cubeUV_m0 - 2.0#define cubeUV_r1 0.8#define cubeUV_m1 - 1.0#define cubeUV_r4 0.4#define cubeUV_m4 2.0#define cubeUV_r5 0.305#define cubeUV_m5 3.0#define cubeUV_r6 0.21#define cubeUV_m6 4.0float roughnessToMip( float roughness ) {float mip = 0.0;if ( roughness >= cubeUV_r1 ) {mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;} else if ( roughness >= cubeUV_r4 ) {mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;} else if ( roughness >= cubeUV_r5 ) {mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;} else if ( roughness >= cubeUV_r6 ) {mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;} else {mip = - 2.0 * log2( 1.16 * roughness );}return mip;}vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );float mipF = fract( mip );float mipInt = floor( mip );vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );if ( mipF == 0.0 ) {return vec4( color0, 1.0 );} else {vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );return vec4( mix( color0, color1, mipF ), 1.0 );}}#endif`,OP=`vec3 transformedNormal = objectNormal;#ifdef USE_TANGENTvec3 transformedTangent = objectTangent;#endif#ifdef USE_BATCHINGmat3 bm = mat3( batchingMatrix );transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );transformedNormal = bm * transformedNormal;#ifdef USE_TANGENTtransformedTangent = bm * transformedTangent;#endif#endif#ifdef USE_INSTANCINGmat3 im = mat3( instanceMatrix );transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );transformedNormal = im * transformedNormal;#ifdef USE_TANGENTtransformedTangent = im * transformedTangent;#endif#endiftransformedNormal = normalMatrix * transformedNormal;#ifdef FLIP_SIDEDtransformedNormal = - transformedNormal;#endif#ifdef USE_TANGENTtransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;#ifdef FLIP_SIDEDtransformedTangent = - transformedTangent;#endif#endif`,UP=`#ifdef USE_DISPLACEMENTMAPuniform sampler2D displacementMap;uniform float displacementScale;uniform float displacementBias;#endif`,FP=`#ifdef USE_DISPLACEMENTMAPtransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );#endif`,kP=`#ifdef USE_EMISSIVEMAPvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );#ifdef DECODE_VIDEO_TEXTURE_EMISSIVEemissiveColor = sRGBTransferEOTF( emissiveColor );#endiftotalEmissiveRadiance *= emissiveColor.rgb;#endif`,BP=`#ifdef USE_EMISSIVEMAPuniform sampler2D emissiveMap;#endif`,jP=",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,VP=`vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}`,GP=`#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif`,HP=`#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif`,zP=`#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif`,$P=`#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif`,WP=`#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif`,qP=`#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif`,YP=`#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif`,KP=`#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif`,XP=`#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif`,QP=`#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}`,ZP=`#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif`,JP=`LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;`,eO=`varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert`,tO=`uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 _ max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance _ cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif`,nO=`#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif`,iO=`ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;`,sO=`varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon`,rO=`BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;`,aO=`varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong`,oO=`PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) _ ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV _= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif`,lO=`struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) _ ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 _ max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 _ pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 _ ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 _ v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) _ LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 _ LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) _ ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a _ b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 _ alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) _ ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 _ ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg _ ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}`,cO=`\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz _ vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif`,uO=`#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif`,hO=`#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif`,dO=`#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif`,fO=`#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif`,mO=`#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif`,pO=`#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif`,gO=`#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif`,vO=`#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif`,yO=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif`,xO=`#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif`,SO=`float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif`,EO=`#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif`,_O=`#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif`,TO=`#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif`,bO=`#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif`,AO=`#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex _ morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif`,RO=`#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif`,wO=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;`,MO=`#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif`,CO=`#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif`,LO=`#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif`,DO=`#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif`,IO=`#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif`,NO=`#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif`,PO=`#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif`,OO=`#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif`,UO=`#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif`,FO=`#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );`,kO=`vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. _ 255.;const float UnpackDownscale = 255. _ 256.;const float ShiftRight8 = 1. _ 256.;\nconst float Inv255 = 1. _ 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 _ PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale _ PackFactors.rg, 1.0 _ PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale _ PackFactors.rgb, 1.0 _ PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y _ 255.0, r.y, r.z - r.w _ 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y _ 255.0 ), v.z + ( v.w _ 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) _ ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) _ ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) _ ( ( far - near ) * depth - far );\n}`,BO=`#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif`,jO=`vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;`,VO=`#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif`,GO=`#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 _ 255.0, -0.25 _ 255.0, 0.25 _ 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif`,HO=`float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif`,zO=`#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif`,$O=`#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance _ (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) _ ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz _= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) _ shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 _ 2.0;\n\t\t\tfloat dy2 = dy0 _ 2.0;\n\t\t\tfloat dx3 = dx1 _ 2.0;\n\t\t\tfloat dy3 = dy1 _ 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 _ 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) _ shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 _ 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 _ max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) _ ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) _ ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 _ 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif`,WO=`#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif`,qO=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif`,YO=`float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}`,KO=`#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif`,XO=`#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j _ size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif`,QO=`#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif`,ZO=`#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif`,JO=`float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif`,e2=`#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif`,t2=`#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif`,n2=`#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color _ ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) _ ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a _ b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure _ 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) _ ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d _ ( peak + d - StartCompression );\n\tcolor *= newPeak _ peak;\n\tfloat g = 1. - 1. _ ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }`,i2=`#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif`,s2=`#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 _ 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 _ 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 _ 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 _ 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) _ ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) _ ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 _ fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 _ cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 _ ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) _ attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy _ ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords _= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a _= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy _ ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords _= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) _ 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif`,r2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif`,a2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif`,o2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif`,l2=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif`;const c2=`varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}`,u2=`uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}`,h2=`varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}`,d2=`#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}`,f2=`varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}`,m2=`uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}`,p2=`#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}`,g2=`#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] _ vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}`,v2=`#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}`,y2=`#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) _ ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}`,x2=`varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}`,S2=`uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}`,E2=`uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}`,_2=`uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}`,T2=`#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}`,b2=`uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}`,A2=`#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}`,R2=`#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}`,w2=`#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}`,M2=`#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}`,C2=`#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}`,L2=`#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}`,D2=`#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}`,I2=`#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}`,N2=`#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}`,P2=`#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}`,O2=`#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}`,U2=`#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}`,F2=`uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale _ - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}`,k2=`uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}`,B2=`#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}`,j2=`uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}`,V2=`uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}`,G2=`uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}`,wt={alphahash_fragment:uP,alphahash_pars_fragment:hP,alphamap_fragment:dP,alphamap_pars_fragment:fP,alphatest_fragment:mP,alphatest_pars_fragment:pP,aomap_fragment:gP,aomap_pars_fragment:vP,batching_pars_vertex:yP,batching_vertex:xP,begin_vertex:SP,beginnormal_vertex:EP,bsdfs:_P,iridescence_fragment:TP,bumpmap_pars_fragment:bP,clipping_planes_fragment:AP,clipping_planes_pars_fragment:RP,clipping_planes_pars_vertex:wP,clipping_planes_vertex:MP,color_fragment:CP,color_pars_fragment:LP,color_pars_vertex:DP,color_vertex:IP,common:NP,cube_uv_reflection_fragment:PP,defaultnormal_vertex:OP,displacementmap_pars_vertex:UP,displacementmap_vertex:FP,emissivemap_fragment:kP,emissivemap_pars_fragment:BP,colorspace_fragment:jP,colorspace_pars_fragment:VP,envmap_fragment:GP,envmap_common_pars_fragment:HP,envmap_pars_fragment:zP,envmap_pars_vertex:$P,envmap_physical_pars_fragment:nO,envmap_vertex:WP,fog_vertex:qP,fog_pars_vertex:YP,fog_fragment:KP,fog_pars_fragment:XP,gradientmap_pars_fragment:QP,lightmap_pars_fragment:ZP,lights_lambert_fragment:JP,lights_lambert_pars_fragment:eO,lights_pars_begin:tO,lights_toon_fragment:iO,lights_toon_pars_fragment:sO,lights_phong_fragment:rO,lights_phong_pars_fragment:aO,lights_physical_fragment:oO,lights_physical_pars_fragment:lO,lights_fragment_begin:cO,lights_fragment_maps:uO,lights_fragment_end:hO,logdepthbuf_fragment:dO,logdepthbuf_pars_fragment:fO,logdepthbuf_pars_vertex:mO,logdepthbuf_vertex:pO,map_fragment:gO,map_pars_fragment:vO,map_particle_fragment:yO,map_particle_pars_fragment:xO,metalnessmap_fragment:SO,metalnessmap_pars_fragment:EO,morphinstance_vertex:_O,morphcolor_vertex:TO,morphnormal_vertex:bO,morphtarget_pars_vertex:AO,morphtarget_vertex:RO,normal_fragment_begin:wO,normal_fragment_maps:MO,normal_pars_fragment:CO,normal_pars_vertex:LO,normal_vertex:DO,normalmap_pars_fragment:IO,clearcoat_normal_fragment_begin:NO,clearcoat_normal_fragment_maps:PO,clearcoat_pars_fragment:OO,iridescence_pars_fragment:UO,opaque_fragment:FO,packing:kO,premultiplied_alpha_fragment:BO,project_vertex:jO,dithering_fragment:VO,dithering_pars_fragment:GO,roughnessmap_fragment:HO,roughnessmap_pars_fragment:zO,shadowmap_pars_fragment:$O,shadowmap_pars_vertex:WO,shadowmap_vertex:qO,shadowmask_pars_fragment:YO,skinbase_vertex:KO,skinning_pars_vertex:XO,skinning_vertex:QO,skinnormal_vertex:ZO,specularmap_fragment:JO,specularmap_pars_fragment:e2,tonemapping_fragment:t2,tonemapping_pars_fragment:n2,transmission_fragment:i2,transmission_pars_fragment:s2,uv_pars_fragment:r2,uv_pars_vertex:a2,uv_vertex:o2,worldpos_vertex:l2,background_vert:c2,background_frag:u2,backgroundCube_vert:h2,backgroundCube_frag:d2,cube_vert:f2,cube_frag:m2,depth_vert:p2,depth_frag:g2,distanceRGBA_vert:v2,distanceRGBA_frag:y2,equirect_vert:x2,equirect_frag:S2,linedashed_vert:E2,linedashed_frag:_2,meshbasic_vert:T2,meshbasic_frag:b2,meshlambert_vert:A2,meshlambert_frag:R2,meshmatcap_vert:w2,meshmatcap_frag:M2,meshnormal_vert:C2,meshnormal_frag:L2,meshphong_vert:D2,meshphong_frag:I2,meshphysical_vert:N2,meshphysical_frag:P2,meshtoon_vert:O2,meshtoon_frag:U2,points_vert:F2,points_frag:k2,shadow_vert:B2,shadow_frag:j2,sprite_vert:V2,sprite_frag:G2},He={common:{diffuse:{value:new Xt(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Rt},alphaMap:{value:null},alphaMapTransform:{value:new Rt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Rt}},envmap:{envMap:{value:null},envMapRotation:{value:new Rt},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Rt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Rt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Rt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Rt},normalScale:{value:new Ht(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Rt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Rt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Rt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Rt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Xt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Xt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Rt},alphaTest:{value:0},uvTransform:{value:new Rt}},sprite:{diffuse:{value:new Xt(16777215)},opacity:{value:1},center:{value:new Ht(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Rt},alphaMap:{value:null},alphaMapTransform:{value:new Rt},alphaTest:{value:0}}},Ws={basic:{uniforms:xi([He.common,He.specularmap,He.envmap,He.aomap,He.lightmap,He.fog]),vertexShader:wt.meshbasic_vert,fragmentShader:wt.meshbasic_frag},lambert:{uniforms:xi([He.common,He.specularmap,He.envmap,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.fog,He.lights,{emissive:{value:new Xt(0)}}]),vertexShader:wt.meshlambert_vert,fragmentShader:wt.meshlambert_frag},phong:{uniforms:xi([He.common,He.specularmap,He.envmap,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.fog,He.lights,{emissive:{value:new Xt(0)},specular:{value:new Xt(1118481)},shininess:{value:30}}]),vertexShader:wt.meshphong_vert,fragmentShader:wt.meshphong_frag},standard:{uniforms:xi([He.common,He.envmap,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.roughnessmap,He.metalnessmap,He.fog,He.lights,{emissive:{value:new Xt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:wt.meshphysical_vert,fragmentShader:wt.meshphysical_frag},toon:{uniforms:xi([He.common,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.gradientmap,He.fog,He.lights,{emissive:{value:new Xt(0)}}]),vertexShader:wt.meshtoon_vert,fragmentShader:wt.meshtoon_frag},matcap:{uniforms:xi([He.common,He.bumpmap,He.normalmap,He.displacementmap,He.fog,{matcap:{value:null}}]),vertexShader:wt.meshmatcap_vert,fragmentShader:wt.meshmatcap_frag},points:{uniforms:xi([He.points,He.fog]),vertexShader:wt.points_vert,fragmentShader:wt.points_frag},dashed:{uniforms:xi([He.common,He.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:wt.linedashed_vert,fragmentShader:wt.linedashed_frag},depth:{uniforms:xi([He.common,He.displacementmap]),vertexShader:wt.depth_vert,fragmentShader:wt.depth_frag},normal:{uniforms:xi([He.common,He.bumpmap,He.normalmap,He.displacementmap,{opacity:{value:1}}]),vertexShader:wt.meshnormal_vert,fragmentShader:wt.meshnormal_frag},sprite:{uniforms:xi([He.sprite,He.fog]),vertexShader:wt.sprite_vert,fragmentShader:wt.sprite_frag},background:{uniforms:{uvTransform:{value:new Rt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:wt.background_vert,fragmentShader:wt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Rt}},vertexShader:wt.backgroundCube_vert,fragmentShader:wt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:wt.cube_vert,fragmentShader:wt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:wt.equirect_vert,fragmentShader:wt.equirect_frag},distanceRGBA:{uniforms:xi([He.common,He.displacementmap,{referencePosition:{value:new me},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:wt.distanceRGBA_vert,fragmentShader:wt.distanceRGBA_frag},shadow:{uniforms:xi([He.lights,He.fog,{color:{value:new Xt(0)},opacity:{value:1}}]),vertexShader:wt.shadow_vert,fragmentShader:wt.shadow_frag}};Ws.physical={uniforms:xi([Ws.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Rt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Rt},clearcoatNormalScale:{value:new Ht(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Rt},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Rt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Rt},sheen:{value:0},sheenColor:{value:new Xt(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Rt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Rt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Rt},transmissionSamplerSize:{value:new Ht},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Rt},attenuationDistance:{value:0},attenuationColor:{value:new Xt(0)},specularColor:{value:new Xt(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Rt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Rt},anisotropyVector:{value:new Ht},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Rt}}]),vertexShader:wt.meshphysical_vert,fragmentShader:wt.meshphysical_frag};const pd={r:0,b:0,g:0},Ja=new Zs,H2=new xn;function z2(i,e,t,n,s,r,o){const c=new Xt(0);let h=r===!0?0:1,u,m,p=null,v=0,y=null;function x(A){let w=A.isScene===!0?A.background:null;return w&&w.isTexture&&(w=(A.backgroundBlurriness>0?t:e).get(w)),w}function T(A){let w=!1;const D=x(A);D===null?_(c,h):D&&D.isColor&&(_(D,1),w=!0);const O=i.xr.getEnvironmentBlendMode();O===",
      "url": "https://pov-reality.com/,VP=`vec4 LinearTransferOETF( in vec4 value ) {return value;}vec4 sRGBTransferEOTF( in vec4 value ) {return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );}vec4 sRGBTransferOETF( in vec4 value ) {return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );}`,GP=`#ifdef USE_ENVMAP#ifdef ENV_WORLDPOSvec3 cameraToFrag;if ( isOrthographic ) {cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );} else {cameraToFrag = normalize( vWorldPosition - cameraPosition );}vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );#ifdef ENVMAP_MODE_REFLECTIONvec3 reflectVec = reflect( cameraToFrag, worldNormal );#elsevec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );#endif#elsevec3 reflectVec = vReflect;#endif#ifdef ENVMAP_TYPE_CUBEvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );#elsevec4 envColor = vec4( 0.0 );#endif#ifdef ENVMAP_BLENDING_MULTIPLYoutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );#elif defined( ENVMAP_BLENDING_MIX )outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );#elif defined( ENVMAP_BLENDING_ADD )outgoingLight += envColor.xyz * specularStrength * reflectivity;#endif#endif`,HP=`#ifdef USE_ENVMAPuniform float envMapIntensity;uniform float flipEnvMap;uniform mat3 envMapRotation;#ifdef ENVMAP_TYPE_CUBEuniform samplerCube envMap;#elseuniform sampler2D envMap;#endif#endif`,zP=`#ifdef USE_ENVMAPuniform float reflectivity;#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )#define ENV_WORLDPOS#endif#ifdef ENV_WORLDPOSvarying vec3 vWorldPosition;uniform float refractionRatio;#elsevarying vec3 vReflect;#endif#endif`,$P=`#ifdef USE_ENVMAP#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )#define ENV_WORLDPOS#endif#ifdef ENV_WORLDPOSvarying vec3 vWorldPosition;#elsevarying vec3 vReflect;uniform float refractionRatio;#endif#endif`,WP=`#ifdef USE_ENVMAP#ifdef ENV_WORLDPOSvWorldPosition = worldPosition.xyz;#elsevec3 cameraToVertex;if ( isOrthographic ) {cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );} else {cameraToVertex = normalize( worldPosition.xyz - cameraPosition );}vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );#ifdef ENVMAP_MODE_REFLECTIONvReflect = reflect( cameraToVertex, worldNormal );#elsevReflect = refract( cameraToVertex, worldNormal, refractionRatio );#endif#endif#endif`,qP=`#ifdef USE_FOGvFogDepth = - mvPosition.z;#endif`,YP=`#ifdef USE_FOGvarying float vFogDepth;#endif`,KP=`#ifdef USE_FOG#ifdef FOG_EXP2float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );#elsefloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );#endifgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );#endif`,XP=`#ifdef USE_FOGuniform vec3 fogColor;varying float vFogDepth;#ifdef FOG_EXP2uniform float fogDensity;#elseuniform float fogNear;uniform float fogFar;#endif#endif`,QP=`#ifdef USE_GRADIENTMAPuniform sampler2D gradientMap;#endifvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {float dotNL = dot( normal, lightDirection );vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );#ifdef USE_GRADIENTMAPreturn vec3( texture2D( gradientMap, coord ).r );#elsevec2 fw = fwidth( coord ) * 0.5;return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );#endif}`,ZP=`#ifdef USE_LIGHTMAPuniform sampler2D lightMap;uniform float lightMapIntensity;#endif`,JP=`LambertMaterial material;material.diffuseColor = diffuseColor.rgb;material.specularStrength = specularStrength;`,eO=`varying vec3 vViewPosition;struct LambertMaterial {vec3 diffuseColor;float specularStrength;};void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {float dotNL = saturate( dot( geometryNormal, directLight.direction ) );vec3 irradiance = dotNL * directLight.color;reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}#define RE_DirectRE_Direct_Lambert#define RE_IndirectDiffuseRE_IndirectDiffuse_Lambert`,tO=`uniform bool receiveShadow;uniform vec3 ambientLightColor;#if defined( USE_LIGHT_PROBES )uniform vec3 lightProbe[ 9 ];#endifvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {float x = normal.x, y = normal.y, z = normal.z;vec3 result = shCoefficients[ 0 ] * 0.886227;result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );return result;}vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );return irradiance;}vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {vec3 irradiance = ambientLightColor;return irradiance;}float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );if ( cutoffDistance > 0.0 ) {distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );}return distanceFalloff;}float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {return smoothstep( coneCosine, penumbraCosine, angleCosine );}#if NUM_DIR_LIGHTS > 0struct DirectionalLight {vec3 direction;vec3 color;};uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {light.color = directionalLight.color;light.direction = directionalLight.direction;light.visible = true;}#endif#if NUM_POINT_LIGHTS > 0struct PointLight {vec3 position;vec3 color;float distance;float decay;};uniform PointLight pointLights[ NUM_POINT_LIGHTS ];void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {vec3 lVector = pointLight.position - geometryPosition;light.direction = normalize( lVector );float lightDistance = length( lVector );light.color = pointLight.color;light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );light.visible = ( light.color != vec3( 0.0 ) );}#endif#if NUM_SPOT_LIGHTS > 0struct SpotLight {vec3 position;vec3 direction;vec3 color;float distance;float decay;float coneCos;float penumbraCos;};uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {vec3 lVector = spotLight.position - geometryPosition;light.direction = normalize( lVector );float angleCos = dot( light.direction, spotLight.direction );float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );if ( spotAttenuation > 0.0 ) {float lightDistance = length( lVector );light.color = spotLight.color * spotAttenuation;light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );light.visible = ( light.color != vec3( 0.0 ) );} else {light.color = vec3( 0.0 );light.visible = false;}}#endif#if NUM_RECT_AREA_LIGHTS > 0struct RectAreaLight {vec3 color;vec3 position;vec3 halfWidth;vec3 halfHeight;};uniform sampler2D ltc_1;uniform sampler2D ltc_2;uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];#endif#if NUM_HEMI_LIGHTS > 0struct HemisphereLight {vec3 direction;vec3 skyColor;vec3 groundColor;};uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {float dotNL = dot( normal, hemiLight.direction );float hemiDiffuseWeight = 0.5 * dotNL + 0.5;vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );return irradiance;}#endif`,nO=`#ifdef USE_ENVMAPvec3 getIBLIrradiance( const in vec3 normal ) {#ifdef ENVMAP_TYPE_CUBE_UVvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );return PI * envMapColor.rgb * envMapIntensity;#elsereturn vec3( 0.0 );#endif}vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {#ifdef ENVMAP_TYPE_CUBE_UVvec3 reflectVec = reflect( - viewDir, normal );reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );reflectVec = inverseTransformDirection( reflectVec, viewMatrix );vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );return envMapColor.rgb * envMapIntensity;#elsereturn vec3( 0.0 );#endif}#ifdef USE_ANISOTROPYvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {#ifdef ENVMAP_TYPE_CUBE_UVvec3 bentNormal = cross( bitangent, viewDir );bentNormal = normalize( cross( bentNormal, bitangent ) );bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );return getIBLRadiance( viewDir, bentNormal, roughness );#elsereturn vec3( 0.0 );#endif}#endif#endif`,iO=`ToonMaterial material;material.diffuseColor = diffuseColor.rgb;`,sO=`varying vec3 vViewPosition;struct ToonMaterial {vec3 diffuseColor;};void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}#define RE_DirectRE_Direct_Toon#define RE_IndirectDiffuseRE_IndirectDiffuse_Toon`,rO=`BlinnPhongMaterial material;material.diffuseColor = diffuseColor.rgb;material.specularColor = specular;material.specularShininess = shininess;material.specularStrength = specularStrength;`,aO=`varying vec3 vViewPosition;struct BlinnPhongMaterial {vec3 diffuseColor;vec3 specularColor;float specularShininess;float specularStrength;};void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {float dotNL = saturate( dot( geometryNormal, directLight.direction ) );vec3 irradiance = dotNL * directLight.color;reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;}void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}#define RE_DirectRE_Direct_BlinnPhong#define RE_IndirectDiffuseRE_IndirectDiffuse_BlinnPhong`,oO=`PhysicalMaterial material;material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;material.roughness = min( material.roughness, 1.0 );#ifdef IORmaterial.ior = ior;#ifdef USE_SPECULARfloat specularIntensityFactor = specularIntensity;vec3 specularColorFactor = specularColor;#ifdef USE_SPECULAR_COLORMAPspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;#endif#ifdef USE_SPECULAR_INTENSITYMAPspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;#endifmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );#elsefloat specularIntensityFactor = 1.0;vec3 specularColorFactor = vec3( 1.0 );material.specularF90 = 1.0;#endifmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );#elsematerial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );material.specularF90 = 1.0;#endif#ifdef USE_CLEARCOATmaterial.clearcoat = clearcoat;material.clearcoatRoughness = clearcoatRoughness;material.clearcoatF0 = vec3( 0.04 );material.clearcoatF90 = 1.0;#ifdef USE_CLEARCOATMAPmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;#endif#ifdef USE_CLEARCOAT_ROUGHNESSMAPmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;#endifmaterial.clearcoat = saturate( material.clearcoat );material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );material.clearcoatRoughness += geometryRoughness;material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );#endif#ifdef USE_DISPERSIONmaterial.dispersion = dispersion;#endif#ifdef USE_IRIDESCENCEmaterial.iridescence = iridescence;material.iridescenceIOR = iridescenceIOR;#ifdef USE_IRIDESCENCEMAPmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;#endif#ifdef USE_IRIDESCENCE_THICKNESSMAPmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;#elsematerial.iridescenceThickness = iridescenceThicknessMaximum;#endif#endif#ifdef USE_SHEENmaterial.sheenColor = sheenColor;#ifdef USE_SHEEN_COLORMAPmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;#endifmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );#ifdef USE_SHEEN_ROUGHNESSMAPmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;#endif#endif#ifdef USE_ANISOTROPY#ifdef USE_ANISOTROPYMAPmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;#elsevec2 anisotropyV = anisotropyVector;#endifmaterial.anisotropy = length( anisotropyV );if( material.anisotropy == 0.0 ) {anisotropyV = vec2( 1.0, 0.0 );} else {anisotropyV /= material.anisotropy;material.anisotropy = saturate( material.anisotropy );}material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;#endif`,lO=`struct PhysicalMaterial {vec3 diffuseColor;float roughness;vec3 specularColor;float specularF90;float dispersion;#ifdef USE_CLEARCOATfloat clearcoat;float clearcoatRoughness;vec3 clearcoatF0;float clearcoatF90;#endif#ifdef USE_IRIDESCENCEfloat iridescence;float iridescenceIOR;float iridescenceThickness;vec3 iridescenceFresnel;vec3 iridescenceF0;#endif#ifdef USE_SHEENvec3 sheenColor;float sheenRoughness;#endif#ifdef IORfloat ior;#endif#ifdef USE_TRANSMISSIONfloat transmission;float transmissionAlpha;float thickness;float attenuationDistance;vec3 attenuationColor;#endif#ifdef USE_ANISOTROPYfloat anisotropy;float alphaT;vec3 anisotropyT;vec3 anisotropyB;#endif};vec3 clearcoatSpecularDirect = vec3( 0.0 );vec3 clearcoatSpecularIndirect = vec3( 0.0 );vec3 sheenSpecularDirect = vec3( 0.0 );vec3 sheenSpecularIndirect = vec3(0.0 );vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );    float x2 = x * x;    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );}float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {float a2 = pow2( alpha );float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );return 0.5 / max( gv + gl, EPSILON );}float D_GGX( const in float alpha, const in float dotNH ) {float a2 = pow2( alpha );float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;return RECIPROCAL_PI * a2 / pow2( denom );}#ifdef USE_ANISOTROPYfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );float v = 0.5 / ( gv + gl );return saturate(v);}float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {float a2 = alphaT * alphaB;highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );highp float v2 = dot( v, v );float w2 = a2 / v2;return RECIPROCAL_PI * a2 * pow2 ( w2 );}#endif#ifdef USE_CLEARCOATvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {vec3 f0 = material.clearcoatF0;float f90 = material.clearcoatF90;float roughness = material.clearcoatRoughness;float alpha = pow2( roughness );vec3 halfDir = normalize( lightDir + viewDir );float dotNL = saturate( dot( normal, lightDir ) );float dotNV = saturate( dot( normal, viewDir ) );float dotNH = saturate( dot( normal, halfDir ) );float dotVH = saturate( dot( viewDir, halfDir ) );vec3 F = F_Schlick( f0, f90, dotVH );float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );float D = D_GGX( alpha, dotNH );return F * ( V * D );}#endifvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {vec3 f0 = material.specularColor;float f90 = material.specularF90;float roughness = material.roughness;float alpha = pow2( roughness );vec3 halfDir = normalize( lightDir + viewDir );float dotNL = saturate( dot( normal, lightDir ) );float dotNV = saturate( dot( normal, viewDir ) );float dotNH = saturate( dot( normal, halfDir ) );float dotVH = saturate( dot( viewDir, halfDir ) );vec3 F = F_Schlick( f0, f90, dotVH );#ifdef USE_IRIDESCENCEF = mix( F, material.iridescenceFresnel, material.iridescence );#endif#ifdef USE_ANISOTROPYfloat dotTL = dot( material.anisotropyT, lightDir );float dotTV = dot( material.anisotropyT, viewDir );float dotTH = dot( material.anisotropyT, halfDir );float dotBL = dot( material.anisotropyB, lightDir );float dotBV = dot( material.anisotropyB, viewDir );float dotBH = dot( material.anisotropyB, halfDir );float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );#elsefloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );float D = D_GGX( alpha, dotNH );#endifreturn F * ( V * D );}vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {const float LUT_SIZE = 64.0;const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;const float LUT_BIAS = 0.5 / LUT_SIZE;float dotNV = saturate( dot( N, V ) );vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );uv = uv * LUT_SCALE + LUT_BIAS;return uv;}float LTC_ClippedSphereFormFactor( const in vec3 f ) {float l = length( f );return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );}vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {float x = dot( v1, v2 );float y = abs( x );float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;float b = 3.4175940 + ( 4.1616724 + y ) * y;float v = a / b;float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;return cross( v1, v2 ) * theta_sintheta;}vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];vec3 lightNormal = cross( v1, v2 );if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );vec3 T1, T2;T1 = normalize( V - N * dot( V, N ) );T2 = - cross( N, T1 );mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );vec3 coords[ 4 ];coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );coords[ 0 ] = normalize( coords[ 0 ] );coords[ 1 ] = normalize( coords[ 1 ] );coords[ 2 ] = normalize( coords[ 2 ] );coords[ 3 ] = normalize( coords[ 3 ] );vec3 vectorFormFactor = vec3( 0.0 );vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );float result = LTC_ClippedSphereFormFactor( vectorFormFactor );return vec3( result );}#if defined( USE_SHEEN )float D_Charlie( float roughness, float dotNH ) {float alpha = pow2( roughness );float invAlpha = 1.0 / alpha;float cos2h = dotNH * dotNH;float sin2h = max( 1.0 - cos2h, 0.0078125 );return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );}float V_Neubelt( float dotNV, float dotNL ) {return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );}vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {vec3 halfDir = normalize( lightDir + viewDir );float dotNL = saturate( dot( normal, lightDir ) );float dotNV = saturate( dot( normal, viewDir ) );float dotNH = saturate( dot( normal, halfDir ) );float D = D_Charlie( sheenRoughness, dotNH );float V = V_Neubelt( dotNV, dotNL );return sheenColor * ( D * V );}#endiffloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {float dotNV = saturate( dot( normal, viewDir ) );float r2 = roughness * roughness;float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );return saturate( DG * RECIPROCAL_PI );}vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {float dotNV = saturate( dot( normal, viewDir ) );const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );vec4 r = roughness * c0 + c1;float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;return fab;}vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {vec2 fab = DFGApprox( normal, viewDir, roughness );return specularColor * fab.x + specularF90 * fab.y;}#ifdef USE_IRIDESCENCEvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {#elsevoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {#endifvec2 fab = DFGApprox( normal, viewDir, roughness );#ifdef USE_IRIDESCENCEvec3 Fr = mix( specularColor, iridescenceF0, iridescence );#elsevec3 Fr = specularColor;#endifvec3 FssEss = Fr * fab.x + specularF90 * fab.y;float Ess = fab.x + fab.y;float Ems = 1.0 - Ess;vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );singleScatter += FssEss;multiScatter += Fms * Ems;}#if NUM_RECT_AREA_LIGHTS > 0void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {vec3 normal = geometryNormal;vec3 viewDir = geometryViewDir;vec3 position = geometryPosition;vec3 lightPos = rectAreaLight.position;vec3 halfWidth = rectAreaLight.halfWidth;vec3 halfHeight = rectAreaLight.halfHeight;vec3 lightColor = rectAreaLight.color;float roughness = material.roughness;vec3 rectCoords[ 4 ];rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;vec2 uv = LTC_Uv( normal, viewDir, roughness );vec4 t1 = texture2D( ltc_1, uv );vec4 t2 = texture2D( ltc_2, uv );mat3 mInv = mat3(vec3( t1.x, 0, t1.y ),vec3(    0, 1,    0 ),vec3( t1.z, 0, t1.w ));vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );}#endifvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {float dotNL = saturate( dot( geometryNormal, directLight.direction ) );vec3 irradiance = dotNL * directLight.color;#ifdef USE_CLEARCOATfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );vec3 ccIrradiance = dotNLcc * directLight.color;clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );#endif#ifdef USE_SHEENsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );#endifreflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );}void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {#ifdef USE_CLEARCOATclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );#endif#ifdef USE_SHEENsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );#endifvec3 singleScattering = vec3( 0.0 );vec3 multiScattering = vec3( 0.0 );vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;#ifdef USE_IRIDESCENCEcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );#elsecomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );#endifvec3 totalScattering = singleScattering + multiScattering;vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );reflectedLight.indirectSpecular += radiance * singleScattering;reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;}#define RE_DirectRE_Direct_Physical#define RE_Direct_RectAreaRE_Direct_RectArea_Physical#define RE_IndirectDiffuseRE_IndirectDiffuse_Physical#define RE_IndirectSpecularRE_IndirectSpecular_Physicalfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );}`,cO=`vec3 geometryPosition = - vViewPosition;vec3 geometryNormal = normal;vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );vec3 geometryClearcoatNormal = vec3( 0.0 );#ifdef USE_CLEARCOATgeometryClearcoatNormal = clearcoatNormal;#endif#ifdef USE_IRIDESCENCEfloat dotNVi = saturate( dot( normal, geometryViewDir ) );if ( material.iridescenceThickness == 0.0 ) {material.iridescence = 0.0;} else {material.iridescence = saturate( material.iridescence );}if ( material.iridescence > 0.0 ) {material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );}#endifIncidentLight directLight;#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )PointLight pointLight;#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0PointLightShadow pointLightShadow;#endif#pragma unroll_loop_startfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {pointLight = pointLights[ i ];getPointLightInfo( pointLight, geometryPosition, directLight );#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )pointLightShadow = pointLightShadows[ i ];directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;#endifRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );}#pragma unroll_loop_end#endif#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )SpotLight spotLight;vec4 spotColor;vec3 spotLightCoord;bool inSpotLightMap;#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0SpotLightShadow spotLightShadow;#endif#pragma unroll_loop_startfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {spotLight = spotLights[ i ];getSpotLightInfo( spotLight, geometryPosition, directLight );#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS#else#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )#endif#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;#endif#undef SPOT_LIGHT_MAP_INDEX#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )spotLightShadow = spotLightShadows[ i ];directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;#endifRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );}#pragma unroll_loop_end#endif#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )DirectionalLight directionalLight;#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0DirectionalLightShadow directionalLightShadow;#endif#pragma unroll_loop_startfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {directionalLight = directionalLights[ i ];getDirectionalLightInfo( directionalLight, directLight );#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )directionalLightShadow = directionalLightShadows[ i ];directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;#endifRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );}#pragma unroll_loop_end#endif#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )RectAreaLight rectAreaLight;#pragma unroll_loop_startfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {rectAreaLight = rectAreaLights[ i ];RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );}#pragma unroll_loop_end#endif#if defined( RE_IndirectDiffuse )vec3 iblIrradiance = vec3( 0.0 );vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );#if defined( USE_LIGHT_PROBES )irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );#endif#if ( NUM_HEMI_LIGHTS > 0 )#pragma unroll_loop_startfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );}#pragma unroll_loop_end#endif#endif#if defined( RE_IndirectSpecular )vec3 radiance = vec3( 0.0 );vec3 clearcoatRadiance = vec3( 0.0 );#endif`,uO=`#if defined( RE_IndirectDiffuse )#ifdef USE_LIGHTMAPvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;irradiance += lightMapIrradiance;#endif#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )iblIrradiance += getIBLIrradiance( geometryNormal );#endif#endif#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )#ifdef USE_ANISOTROPYradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );#elseradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );#endif#ifdef USE_CLEARCOATclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );#endif#endif`,hO=`#if defined( RE_IndirectDiffuse )RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );#endif#if defined( RE_IndirectSpecular )RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );#endif`,dO=`#if defined( USE_LOGDEPTHBUF )gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;#endif`,fO=`#if defined( USE_LOGDEPTHBUF )uniform float logDepthBufFC;varying float vFragDepth;varying float vIsPerspective;#endif`,mO=`#ifdef USE_LOGDEPTHBUFvarying float vFragDepth;varying float vIsPerspective;#endif`,pO=`#ifdef USE_LOGDEPTHBUFvFragDepth = 1.0 + gl_Position.w;vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );#endif`,gO=`#ifdef USE_MAPvec4 sampledDiffuseColor = texture2D( map, vMapUv );#ifdef DECODE_VIDEO_TEXTUREsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );#endifdiffuseColor *= sampledDiffuseColor;#endif`,vO=`#ifdef USE_MAPuniform sampler2D map;#endif`,yO=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )#if defined( USE_POINTS_UV )vec2 uv = vUv;#elsevec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;#endif#endif#ifdef USE_MAPdiffuseColor *= texture2D( map, uv );#endif#ifdef USE_ALPHAMAPdiffuseColor.a *= texture2D( alphaMap, uv ).g;#endif`,xO=`#if defined( USE_POINTS_UV )varying vec2 vUv;#else#if defined( USE_MAP ) || defined( USE_ALPHAMAP )uniform mat3 uvTransform;#endif#endif#ifdef USE_MAPuniform sampler2D map;#endif#ifdef USE_ALPHAMAPuniform sampler2D alphaMap;#endif`,SO=`float metalnessFactor = metalness;#ifdef USE_METALNESSMAPvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );metalnessFactor *= texelMetalness.b;#endif`,EO=`#ifdef USE_METALNESSMAPuniform sampler2D metalnessMap;#endif`,_O=`#ifdef USE_INSTANCING_MORPHfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;}#endif`,TO=`#if defined( USE_MORPHCOLORS )vColor *= morphTargetBaseInfluence;for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {#if defined( USE_COLOR_ALPHA )if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];#elif defined( USE_COLOR )if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];#endif}#endif`,bO=`#ifdef USE_MORPHNORMALSobjectNormal *= morphTargetBaseInfluence;for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];}#endif`,AO=`#ifdef USE_MORPHTARGETS#ifndef USE_INSTANCING_MORPHuniform float morphTargetBaseInfluence;uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];#endifuniform sampler2DArray morphTargetsTexture;uniform ivec2 morphTargetsTextureSize;vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;int y = texelIndex / morphTargetsTextureSize.x;int x = texelIndex - y * morphTargetsTextureSize.x;ivec3 morphUV = ivec3( x, y, morphTargetIndex );return texelFetch( morphTargetsTexture, morphUV, 0 );}#endif`,RO=`#ifdef USE_MORPHTARGETStransformed *= morphTargetBaseInfluence;for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];}#endif`,wO=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;#ifdef FLAT_SHADEDvec3 fdx = dFdx( vViewPosition );vec3 fdy = dFdy( vViewPosition );vec3 normal = normalize( cross( fdx, fdy ) );#elsevec3 normal = normalize( vNormal );#ifdef DOUBLE_SIDEDnormal *= faceDirection;#endif#endif#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )#ifdef USE_TANGENTmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );#elsemat3 tbn = getTangentFrame( - vViewPosition, normal,#if defined( USE_NORMALMAP )vNormalMapUv#elif defined( USE_CLEARCOAT_NORMALMAP )vClearcoatNormalMapUv#elsevUv#endif);#endif#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )tbn[0] *= faceDirection;tbn[1] *= faceDirection;#endif#endif#ifdef USE_CLEARCOAT_NORMALMAP#ifdef USE_TANGENTmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );#elsemat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );#endif#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )tbn2[0] *= faceDirection;tbn2[1] *= faceDirection;#endif#endifvec3 nonPerturbedNormal = normal;`,MO=`#ifdef USE_NORMALMAP_OBJECTSPACEnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;#ifdef FLIP_SIDEDnormal = - normal;#endif#ifdef DOUBLE_SIDEDnormal = normal * faceDirection;#endifnormal = normalize( normalMatrix * normal );#elif defined( USE_NORMALMAP_TANGENTSPACE )vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;mapN.xy *= normalScale;normal = normalize( tbn * mapN );#elif defined( USE_BUMPMAP )normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );#endif`,CO=`#ifndef FLAT_SHADEDvarying vec3 vNormal;#ifdef USE_TANGENTvarying vec3 vTangent;varying vec3 vBitangent;#endif#endif`,LO=`#ifndef FLAT_SHADEDvarying vec3 vNormal;#ifdef USE_TANGENTvarying vec3 vTangent;varying vec3 vBitangent;#endif#endif`,DO=`#ifndef FLAT_SHADEDvNormal = normalize( transformedNormal );#ifdef USE_TANGENTvTangent = normalize( transformedTangent );vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );#endif#endif`,IO=`#ifdef USE_NORMALMAPuniform sampler2D normalMap;uniform vec2 normalScale;#endif#ifdef USE_NORMALMAP_OBJECTSPACEuniform mat3 normalMatrix;#endif#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {vec3 q0 = dFdx( eye_pos.xyz );vec3 q1 = dFdy( eye_pos.xyz );vec2 st0 = dFdx( uv.st );vec2 st1 = dFdy( uv.st );vec3 N = surf_norm;vec3 q1perp = cross( q1, N );vec3 q0perp = cross( N, q0 );vec3 T = q1perp * st0.x + q0perp * st1.x;vec3 B = q1perp * st0.y + q0perp * st1.y;float det = max( dot( T, T ), dot( B, B ) );float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );return mat3( T * scale, B * scale, N );}#endif`,NO=`#ifdef USE_CLEARCOATvec3 clearcoatNormal = nonPerturbedNormal;#endif`,PO=`#ifdef USE_CLEARCOAT_NORMALMAPvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;clearcoatMapN.xy *= clearcoatNormalScale;clearcoatNormal = normalize( tbn2 * clearcoatMapN );#endif`,OO=`#ifdef USE_CLEARCOATMAPuniform sampler2D clearcoatMap;#endif#ifdef USE_CLEARCOAT_NORMALMAPuniform sampler2D clearcoatNormalMap;uniform vec2 clearcoatNormalScale;#endif#ifdef USE_CLEARCOAT_ROUGHNESSMAPuniform sampler2D clearcoatRoughnessMap;#endif`,UO=`#ifdef USE_IRIDESCENCEMAPuniform sampler2D iridescenceMap;#endif#ifdef USE_IRIDESCENCE_THICKNESSMAPuniform sampler2D iridescenceThicknessMap;#endif`,FO=`#ifdef OPAQUEdiffuseColor.a = 1.0;#endif#ifdef USE_TRANSMISSIONdiffuseColor.a *= material.transmissionAlpha;#endifgl_FragColor = vec4( outgoingLight, diffuseColor.a );`,kO=`vec3 packNormalToRGB( const in vec3 normal ) {return normalize( normal ) * 0.5 + 0.5;}vec3 unpackRGBToNormal( const in vec3 rgb ) {return 2.0 * rgb.xyz - 1.0;}const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;const float Inv255 = 1. / 255.;const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );vec4 packDepthToRGBA( const in float v ) {if( v <= 0.0 )return vec4( 0., 0., 0., 0. );if( v >= 1.0 )return vec4( 1., 1., 1., 1. );float vuf;float af = modf( v * PackFactors.a, vuf );float bf = modf( vuf * ShiftRight8, vuf );float gf = modf( vuf * ShiftRight8, vuf );return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );}vec3 packDepthToRGB( const in float v ) {if( v <= 0.0 )return vec3( 0., 0., 0. );if( v >= 1.0 )return vec3( 1., 1., 1. );float vuf;float bf = modf( v * PackFactors.b, vuf );float gf = modf( vuf * ShiftRight8, vuf );return vec3( vuf * Inv255, gf * PackUpscale, bf );}vec2 packDepthToRG( const in float v ) {if( v <= 0.0 )return vec2( 0., 0. );if( v >= 1.0 )return vec2( 1., 1. );float vuf;float gf = modf( v * 256., vuf );return vec2( vuf * Inv255, gf );}float unpackRGBAToDepth( const in vec4 v ) {return dot( v, UnpackFactors4 );}float unpackRGBToDepth( const in vec3 v ) {return dot( v, UnpackFactors3 );}float unpackRGToDepth( const in vec2 v ) {return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;}vec4 pack2HalfToRGBA( const in vec2 v ) {vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );}vec2 unpackRGBATo2Half( const in vec4 v ) {return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );}float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {return ( viewZ + near ) / ( near - far );}float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {return depth * ( near - far ) - near;}float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );}float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {return ( near * far ) / ( ( far - near ) * depth - far );}`,BO=`#ifdef PREMULTIPLIED_ALPHAgl_FragColor.rgb *= gl_FragColor.a;#endif`,jO=`vec4 mvPosition = vec4( transformed, 1.0 );#ifdef USE_BATCHINGmvPosition = batchingMatrix * mvPosition;#endif#ifdef USE_INSTANCINGmvPosition = instanceMatrix * mvPosition;#endifmvPosition = modelViewMatrix * mvPosition;gl_Position = projectionMatrix * mvPosition;`,VO=`#ifdef DITHERINGgl_FragColor.rgb = dithering( gl_FragColor.rgb );#endif`,GO=`#ifdef DITHERINGvec3 dithering( vec3 color ) {float grid_position = rand( gl_FragCoord.xy );vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );return color + dither_shift_RGB;}#endif`,HO=`float roughnessFactor = roughness;#ifdef USE_ROUGHNESSMAPvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );roughnessFactor *= texelRoughness.g;#endif`,zO=`#ifdef USE_ROUGHNESSMAPuniform sampler2D roughnessMap;#endif`,$O=`#if NUM_SPOT_LIGHT_COORDS > 0varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];#endif#if NUM_SPOT_LIGHT_MAPS > 0uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];#endif#ifdef USE_SHADOWMAP#if NUM_DIR_LIGHT_SHADOWS > 0uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];struct DirectionalLightShadow {float shadowIntensity;float shadowBias;float shadowNormalBias;float shadowRadius;vec2 shadowMapSize;};uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];#endif#if NUM_SPOT_LIGHT_SHADOWS > 0uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];struct SpotLightShadow {float shadowIntensity;float shadowBias;float shadowNormalBias;float shadowRadius;vec2 shadowMapSize;};uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];#endif#if NUM_POINT_LIGHT_SHADOWS > 0uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];struct PointLightShadow {float shadowIntensity;float shadowBias;float shadowNormalBias;float shadowRadius;vec2 shadowMapSize;float shadowCameraNear;float shadowCameraFar;};uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];#endiffloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );}vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {return unpackRGBATo2Half( texture2D( shadow, uv ) );}float VSMShadow (sampler2D shadow, vec2 uv, float compare ){float occlusion = 1.0;vec2 distribution = texture2DDistribution( shadow, uv );float hard_shadow = step( compare , distribution.x );if (hard_shadow != 1.0 ) {float distance = compare - distribution.x ;float variance = max( 0.00000, distribution.y * distribution.y );float softness_probability = variance / (variance + distance * distance );softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );}return occlusion;}float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {float shadow = 1.0;shadowCoord.xyz /= shadowCoord.w;shadowCoord.z += shadowBias;bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;bool frustumTest = inFrustum && shadowCoord.z <= 1.0;if ( frustumTest ) {#if defined( SHADOWMAP_TYPE_PCF )vec2 texelSize = vec2( 1.0 ) / shadowMapSize;float dx0 = - texelSize.x * shadowRadius;float dy0 = - texelSize.y * shadowRadius;float dx1 = + texelSize.x * shadowRadius;float dy1 = + texelSize.y * shadowRadius;float dx2 = dx0 / 2.0;float dy2 = dy0 / 2.0;float dx3 = dx1 / 2.0;float dy3 = dy1 / 2.0;shadow = (texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )) * ( 1.0 / 17.0 );#elif defined( SHADOWMAP_TYPE_PCF_SOFT )vec2 texelSize = vec2( 1.0 ) / shadowMapSize;float dx = texelSize.x;float dy = texelSize.y;vec2 uv = shadowCoord.xy;vec2 f = fract( uv * shadowMapSize + 0.5 );uv -= f * texelSize;shadow = (texture2DCompare( shadowMap, uv, shadowCoord.z ) +texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ), f.x ) +mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ), f.x ) +mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ), f.y ) +mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ), f.y ) +mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),  f.x ), mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),  f.x ), f.y )) * ( 1.0 / 9.0 );#elif defined( SHADOWMAP_TYPE_VSM )shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );#elseshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );#endif}return mix( 1.0, shadow, shadowIntensity );}vec2 cubeToUV( vec3 v, float texelSizeY ) {vec3 absV = abs( v );float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );absV *= scaleToCube;v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );vec2 planar = v.xy;float almostATexel = 1.5 * texelSizeY;float almostOne = 1.0 - almostATexel;if ( absV.z >= almostOne ) {if ( v.z > 0.0 )planar.x = 4.0 - v.x;} else if ( absV.x >= almostOne ) {float signX = sign( v.x );planar.x = v.z * signX + 2.0 * signX;} else if ( absV.y >= almostOne ) {float signY = sign( v.y );planar.x = v.x + 2.0 * signY + 2.0;planar.y = v.z * signY - 2.0;}return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );}float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {float shadow = 1.0;vec3 lightToPosition = shadowCoord.xyz;float lightToPositionLength = length( lightToPosition );if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );dp += shadowBias;vec3 bd3D = normalize( lightToPosition );vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;shadow = (texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )) * ( 1.0 / 9.0 );#elseshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );#endif}return mix( 1.0, shadow, shadowIntensity );}#endif`,WO=`#if NUM_SPOT_LIGHT_COORDS > 0uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];#endif#ifdef USE_SHADOWMAP#if NUM_DIR_LIGHT_SHADOWS > 0uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];struct DirectionalLightShadow {float shadowIntensity;float shadowBias;float shadowNormalBias;float shadowRadius;vec2 shadowMapSize;};uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];#endif#if NUM_SPOT_LIGHT_SHADOWS > 0struct SpotLightShadow {float shadowIntensity;float shadowBias;float shadowNormalBias;float shadowRadius;vec2 shadowMapSize;};uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];#endif#if NUM_POINT_LIGHT_SHADOWS > 0uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];struct PointLightShadow {float shadowIntensity;float shadowBias;float shadowNormalBias;float shadowRadius;vec2 shadowMapSize;float shadowCameraNear;float shadowCameraFar;};uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];#endif#endif`,qO=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );vec4 shadowWorldPosition;#endif#if defined( USE_SHADOWMAP )#if NUM_DIR_LIGHT_SHADOWS > 0#pragma unroll_loop_startfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;}#pragma unroll_loop_end#endif#if NUM_POINT_LIGHT_SHADOWS > 0#pragma unroll_loop_startfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;}#pragma unroll_loop_end#endif#endif#if NUM_SPOT_LIGHT_COORDS > 0#pragma unroll_loop_startfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {shadowWorldPosition = worldPosition;#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;#endifvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;}#pragma unroll_loop_end#endif`,YO=`float getShadowMask() {float shadow = 1.0;#ifdef USE_SHADOWMAP#if NUM_DIR_LIGHT_SHADOWS > 0DirectionalLightShadow directionalLight;#pragma unroll_loop_startfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {directionalLight = directionalLightShadows[ i ];shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;}#pragma unroll_loop_end#endif#if NUM_SPOT_LIGHT_SHADOWS > 0SpotLightShadow spotLight;#pragma unroll_loop_startfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {spotLight = spotLightShadows[ i ];shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;}#pragma unroll_loop_end#endif#if NUM_POINT_LIGHT_SHADOWS > 0PointLightShadow pointLight;#pragma unroll_loop_startfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {pointLight = pointLightShadows[ i ];shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;}#pragma unroll_loop_end#endif#endifreturn shadow;}`,KO=`#ifdef USE_SKINNINGmat4 boneMatX = getBoneMatrix( skinIndex.x );mat4 boneMatY = getBoneMatrix( skinIndex.y );mat4 boneMatZ = getBoneMatrix( skinIndex.z );mat4 boneMatW = getBoneMatrix( skinIndex.w );#endif`,XO=`#ifdef USE_SKINNINGuniform mat4 bindMatrix;uniform mat4 bindMatrixInverse;uniform highp sampler2D boneTexture;mat4 getBoneMatrix( const in float i ) {int size = textureSize( boneTexture, 0 ).x;int j = int( i ) * 4;int x = j % size;int y = j / size;vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );return mat4( v1, v2, v3, v4 );}#endif`,QO=`#ifdef USE_SKINNINGvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );vec4 skinned = vec4( 0.0 );skinned += boneMatX * skinVertex * skinWeight.x;skinned += boneMatY * skinVertex * skinWeight.y;skinned += boneMatZ * skinVertex * skinWeight.z;skinned += boneMatW * skinVertex * skinWeight.w;transformed = ( bindMatrixInverse * skinned ).xyz;#endif`,ZO=`#ifdef USE_SKINNINGmat4 skinMatrix = mat4( 0.0 );skinMatrix += skinWeight.x * boneMatX;skinMatrix += skinWeight.y * boneMatY;skinMatrix += skinWeight.z * boneMatZ;skinMatrix += skinWeight.w * boneMatW;skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;#ifdef USE_TANGENTobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;#endif#endif`,JO=`float specularStrength;#ifdef USE_SPECULARMAPvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );specularStrength = texelSpecular.r;#elsespecularStrength = 1.0;#endif`,e2=`#ifdef USE_SPECULARMAPuniform sampler2D specularMap;#endif`,t2=`#if defined( TONE_MAPPING )gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );#endif`,n2=`#ifndef saturate#define saturate( a ) clamp( a, 0.0, 1.0 )#endifuniform float toneMappingExposure;vec3 LinearToneMapping( vec3 color ) {return saturate( toneMappingExposure * color );}vec3 ReinhardToneMapping( vec3 color ) {color *= toneMappingExposure;return saturate( color / ( vec3( 1.0 ) + color ) );}vec3 CineonToneMapping( vec3 color ) {color *= toneMappingExposure;color = max( vec3( 0.0 ), color - 0.004 );return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );}vec3 RRTAndODTFit( vec3 v ) {vec3 a = v * ( v + 0.0245786 ) - 0.000090537;vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;return a / b;}vec3 ACESFilmicToneMapping( vec3 color ) {const mat3 ACESInputMat = mat3(vec3( 0.59719, 0.07600, 0.02840 ),vec3( 0.35458, 0.90834, 0.13383 ),vec3( 0.04823, 0.01566, 0.83777 ));const mat3 ACESOutputMat = mat3(vec3(  1.60475, -0.10208, -0.00327 ),vec3( -0.53108,  1.10813, -0.07276 ),vec3( -0.07367, -0.00605,  1.07602 ));color *= toneMappingExposure / 0.6;color = ACESInputMat * color;color = RRTAndODTFit( color );color = ACESOutputMat * color;return saturate( color );}const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(vec3( 1.6605, - 0.1246, - 0.0182 ),vec3( - 0.5876, 1.1329, - 0.1006 ),vec3( - 0.0728, - 0.0083, 1.1187 ));const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(vec3( 0.6274, 0.0691, 0.0164 ),vec3( 0.3293, 0.9195, 0.0880 ),vec3( 0.0433, 0.0113, 0.8956 ));vec3 agxDefaultContrastApprox( vec3 x ) {vec3 x2 = x * x;vec3 x4 = x2 * x2;return + 15.5 * x4 * x2- 40.14 * x4 * x+ 31.96 * x4- 6.868 * x2 * x+ 0.4298 * x2+ 0.1191 * x- 0.00232;}vec3 AgXToneMapping( vec3 color ) {const mat3 AgXInsetMatrix = mat3(vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ));const mat3 AgXOutsetMatrix = mat3(vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ));const float AgxMinEv = - 12.47393;const float AgxMaxEv = 4.026069;color *= toneMappingExposure;color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;color = AgXInsetMatrix * color;color = max( color, 1e-10 );color = log2( color );color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );color = clamp( color, 0.0, 1.0 );color = agxDefaultContrastApprox( color );color = AgXOutsetMatrix * color;color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );color = LINEAR_REC2020_TO_LINEAR_SRGB * color;color = clamp( color, 0.0, 1.0 );return color;}vec3 NeutralToneMapping( vec3 color ) {const float StartCompression = 0.8 - 0.04;const float Desaturation = 0.15;color *= toneMappingExposure;float x = min( color.r, min( color.g, color.b ) );float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;color -= offset;float peak = max( color.r, max( color.g, color.b ) );if ( peak < StartCompression ) return color;float d = 1. - StartCompression;float newPeak = 1. - d * d / ( peak + d - StartCompression );color *= newPeak / peak;float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );return mix( color, vec3( newPeak ), g );}vec3 CustomToneMapping( vec3 color ) { return color; }`,i2=`#ifdef USE_TRANSMISSIONmaterial.transmission = transmission;material.transmissionAlpha = 1.0;material.thickness = thickness;material.attenuationDistance = attenuationDistance;material.attenuationColor = attenuationColor;#ifdef USE_TRANSMISSIONMAPmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;#endif#ifdef USE_THICKNESSMAPmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;#endifvec3 pos = vWorldPosition;vec3 v = normalize( cameraPosition - pos );vec3 n = inverseTransformDirection( normal, viewMatrix );vec4 transmitted = getIBLVolumeRefraction(n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,material.attenuationColor, material.attenuationDistance );material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );#endif`,s2=`#ifdef USE_TRANSMISSIONuniform float transmission;uniform float thickness;uniform float attenuationDistance;uniform vec3 attenuationColor;#ifdef USE_TRANSMISSIONMAPuniform sampler2D transmissionMap;#endif#ifdef USE_THICKNESSMAPuniform sampler2D thicknessMap;#endifuniform vec2 transmissionSamplerSize;uniform sampler2D transmissionSamplerMap;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;varying vec3 vWorldPosition;float w0( float a ) {return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );}float w1( float a ) {return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );}float w2( float a ){return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );}float w3( float a ) {return ( 1.0 / 6.0 ) * ( a * a * a );}float g0( float a ) {return w0( a ) + w1( a );}float g1( float a ) {return w2( a ) + w3( a );}float h0( float a ) {return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );}float h1( float a ) {return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );}vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {uv = uv * texelSize.zw + 0.5;vec2 iuv = floor( uv );vec2 fuv = fract( uv );float g0x = g0( fuv.x );float g1x = g1( fuv.x );float h0x = h0( fuv.x );float h1x = h1( fuv.x );float h0y = h0( fuv.y );float h1y = h1( fuv.y );vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );}vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );vec2 fLodSizeInv = 1.0 / fLodSize;vec2 cLodSizeInv = 1.0 / cLodSize;vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );return mix( fSample, cSample, fract( lod ) );}vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );vec3 modelScale;modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );return normalize( refractionVector ) * thickness * modelScale;}float applyIorToRoughness( const in float roughness, const in float ior ) {return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );}vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );}vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {if ( isinf( attenuationDistance ) ) {return vec3( 1.0 );} else {vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );return transmittance;}}vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,const in vec3 attenuationColor, const in float attenuationDistance ) {vec4 transmittedLight;vec3 transmittance;#ifdef USE_DISPERSIONfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );for ( int i = 0; i < 3; i ++ ) {vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );vec3 refractedRayExit = position + transmissionRay;vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );vec2 refractionCoords = ndcPos.xy / ndcPos.w;refractionCoords += 1.0;refractionCoords /= 2.0;vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );transmittedLight[ i ] = transmissionSample[ i ];transmittedLight.a += transmissionSample.a;transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];}transmittedLight.a /= 3.0;#elsevec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );vec3 refractedRayExit = position + transmissionRay;vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );vec2 refractionCoords = ndcPos.xy / ndcPos.w;refractionCoords += 1.0;refractionCoords /= 2.0;transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );#endifvec3 attenuatedColor = transmittance * transmittedLight.rgb;vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );}#endif`,r2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )varying vec2 vUv;#endif#ifdef USE_MAPvarying vec2 vMapUv;#endif#ifdef USE_ALPHAMAPvarying vec2 vAlphaMapUv;#endif#ifdef USE_LIGHTMAPvarying vec2 vLightMapUv;#endif#ifdef USE_AOMAPvarying vec2 vAoMapUv;#endif#ifdef USE_BUMPMAPvarying vec2 vBumpMapUv;#endif#ifdef USE_NORMALMAPvarying vec2 vNormalMapUv;#endif#ifdef USE_EMISSIVEMAPvarying vec2 vEmissiveMapUv;#endif#ifdef USE_METALNESSMAPvarying vec2 vMetalnessMapUv;#endif#ifdef USE_ROUGHNESSMAPvarying vec2 vRoughnessMapUv;#endif#ifdef USE_ANISOTROPYMAPvarying vec2 vAnisotropyMapUv;#endif#ifdef USE_CLEARCOATMAPvarying vec2 vClearcoatMapUv;#endif#ifdef USE_CLEARCOAT_NORMALMAPvarying vec2 vClearcoatNormalMapUv;#endif#ifdef USE_CLEARCOAT_ROUGHNESSMAPvarying vec2 vClearcoatRoughnessMapUv;#endif#ifdef USE_IRIDESCENCEMAPvarying vec2 vIridescenceMapUv;#endif#ifdef USE_IRIDESCENCE_THICKNESSMAPvarying vec2 vIridescenceThicknessMapUv;#endif#ifdef USE_SHEEN_COLORMAPvarying vec2 vSheenColorMapUv;#endif#ifdef USE_SHEEN_ROUGHNESSMAPvarying vec2 vSheenRoughnessMapUv;#endif#ifdef USE_SPECULARMAPvarying vec2 vSpecularMapUv;#endif#ifdef USE_SPECULAR_COLORMAPvarying vec2 vSpecularColorMapUv;#endif#ifdef USE_SPECULAR_INTENSITYMAPvarying vec2 vSpecularIntensityMapUv;#endif#ifdef USE_TRANSMISSIONMAPuniform mat3 transmissionMapTransform;varying vec2 vTransmissionMapUv;#endif#ifdef USE_THICKNESSMAPuniform mat3 thicknessMapTransform;varying vec2 vThicknessMapUv;#endif`,a2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )varying vec2 vUv;#endif#ifdef USE_MAPuniform mat3 mapTransform;varying vec2 vMapUv;#endif#ifdef USE_ALPHAMAPuniform mat3 alphaMapTransform;varying vec2 vAlphaMapUv;#endif#ifdef USE_LIGHTMAPuniform mat3 lightMapTransform;varying vec2 vLightMapUv;#endif#ifdef USE_AOMAPuniform mat3 aoMapTransform;varying vec2 vAoMapUv;#endif#ifdef USE_BUMPMAPuniform mat3 bumpMapTransform;varying vec2 vBumpMapUv;#endif#ifdef USE_NORMALMAPuniform mat3 normalMapTransform;varying vec2 vNormalMapUv;#endif#ifdef USE_DISPLACEMENTMAPuniform mat3 displacementMapTransform;varying vec2 vDisplacementMapUv;#endif#ifdef USE_EMISSIVEMAPuniform mat3 emissiveMapTransform;varying vec2 vEmissiveMapUv;#endif#ifdef USE_METALNESSMAPuniform mat3 metalnessMapTransform;varying vec2 vMetalnessMapUv;#endif#ifdef USE_ROUGHNESSMAPuniform mat3 roughnessMapTransform;varying vec2 vRoughnessMapUv;#endif#ifdef USE_ANISOTROPYMAPuniform mat3 anisotropyMapTransform;varying vec2 vAnisotropyMapUv;#endif#ifdef USE_CLEARCOATMAPuniform mat3 clearcoatMapTransform;varying vec2 vClearcoatMapUv;#endif#ifdef USE_CLEARCOAT_NORMALMAPuniform mat3 clearcoatNormalMapTransform;varying vec2 vClearcoatNormalMapUv;#endif#ifdef USE_CLEARCOAT_ROUGHNESSMAPuniform mat3 clearcoatRoughnessMapTransform;varying vec2 vClearcoatRoughnessMapUv;#endif#ifdef USE_SHEEN_COLORMAPuniform mat3 sheenColorMapTransform;varying vec2 vSheenColorMapUv;#endif#ifdef USE_SHEEN_ROUGHNESSMAPuniform mat3 sheenRoughnessMapTransform;varying vec2 vSheenRoughnessMapUv;#endif#ifdef USE_IRIDESCENCEMAPuniform mat3 iridescenceMapTransform;varying vec2 vIridescenceMapUv;#endif#ifdef USE_IRIDESCENCE_THICKNESSMAPuniform mat3 iridescenceThicknessMapTransform;varying vec2 vIridescenceThicknessMapUv;#endif#ifdef USE_SPECULARMAPuniform mat3 specularMapTransform;varying vec2 vSpecularMapUv;#endif#ifdef USE_SPECULAR_COLORMAPuniform mat3 specularColorMapTransform;varying vec2 vSpecularColorMapUv;#endif#ifdef USE_SPECULAR_INTENSITYMAPuniform mat3 specularIntensityMapTransform;varying vec2 vSpecularIntensityMapUv;#endif#ifdef USE_TRANSMISSIONMAPuniform mat3 transmissionMapTransform;varying vec2 vTransmissionMapUv;#endif#ifdef USE_THICKNESSMAPuniform mat3 thicknessMapTransform;varying vec2 vThicknessMapUv;#endif`,o2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )vUv = vec3( uv, 1 ).xy;#endif#ifdef USE_MAPvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;#endif#ifdef USE_ALPHAMAPvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;#endif#ifdef USE_LIGHTMAPvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;#endif#ifdef USE_AOMAPvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;#endif#ifdef USE_BUMPMAPvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;#endif#ifdef USE_NORMALMAPvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;#endif#ifdef USE_DISPLACEMENTMAPvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;#endif#ifdef USE_EMISSIVEMAPvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;#endif#ifdef USE_METALNESSMAPvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;#endif#ifdef USE_ROUGHNESSMAPvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;#endif#ifdef USE_ANISOTROPYMAPvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;#endif#ifdef USE_CLEARCOATMAPvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;#endif#ifdef USE_CLEARCOAT_NORMALMAPvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;#endif#ifdef USE_CLEARCOAT_ROUGHNESSMAPvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;#endif#ifdef USE_IRIDESCENCEMAPvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;#endif#ifdef USE_IRIDESCENCE_THICKNESSMAPvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;#endif#ifdef USE_SHEEN_COLORMAPvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;#endif#ifdef USE_SHEEN_ROUGHNESSMAPvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;#endif#ifdef USE_SPECULARMAPvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;#endif#ifdef USE_SPECULAR_COLORMAPvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;#endif#ifdef USE_SPECULAR_INTENSITYMAPvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;#endif#ifdef USE_TRANSMISSIONMAPvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;#endif#ifdef USE_THICKNESSMAPvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;#endif`,l2=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0vec4 worldPosition = vec4( transformed, 1.0 );#ifdef USE_BATCHINGworldPosition = batchingMatrix * worldPosition;#endif#ifdef USE_INSTANCINGworldPosition = instanceMatrix * worldPosition;#endifworldPosition = modelMatrix * worldPosition;#endif`;const c2=`varying vec2 vUv;uniform mat3 uvTransform;void main() {vUv = ( uvTransform * vec3( uv, 1 ) ).xy;gl_Position = vec4( position.xy, 1.0, 1.0 );}`,u2=`uniform sampler2D t2D;uniform float backgroundIntensity;varying vec2 vUv;void main() {vec4 texColor = texture2D( t2D, vUv );#ifdef DECODE_VIDEO_TEXTUREtexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );#endiftexColor.rgb *= backgroundIntensity;gl_FragColor = texColor;#include <tonemapping_fragment>#include <colorspace_fragment>}`,h2=`varying vec3 vWorldDirection;#include <common>void main() {vWorldDirection = transformDirection( position, modelMatrix );#include <begin_vertex>#include <project_vertex>gl_Position.z = gl_Position.w;}`,d2=`#ifdef ENVMAP_TYPE_CUBEuniform samplerCube envMap;#elif defined( ENVMAP_TYPE_CUBE_UV )uniform sampler2D envMap;#endifuniform float flipEnvMap;uniform float backgroundBlurriness;uniform float backgroundIntensity;uniform mat3 backgroundRotation;varying vec3 vWorldDirection;#include <cube_uv_reflection_fragment>void main() {#ifdef ENVMAP_TYPE_CUBEvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );#elif defined( ENVMAP_TYPE_CUBE_UV )vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );#elsevec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );#endiftexColor.rgb *= backgroundIntensity;gl_FragColor = texColor;#include <tonemapping_fragment>#include <colorspace_fragment>}`,f2=`varying vec3 vWorldDirection;#include <common>void main() {vWorldDirection = transformDirection( position, modelMatrix );#include <begin_vertex>#include <project_vertex>gl_Position.z = gl_Position.w;}`,m2=`uniform samplerCube tCube;uniform float tFlip;uniform float opacity;varying vec3 vWorldDirection;void main() {vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );gl_FragColor = texColor;gl_FragColor.a *= opacity;#include <tonemapping_fragment>#include <colorspace_fragment>}`,p2=`#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>varying vec2 vHighPrecisionZW;void main() {#include <uv_vertex>#include <batching_vertex>#include <skinbase_vertex>#include <morphinstance_vertex>#ifdef USE_DISPLACEMENTMAP#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinnormal_vertex>#endif#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>vHighPrecisionZW = gl_Position.zw;}`,g2=`#if DEPTH_PACKING == 3200uniform float opacity;#endif#include <common>#include <packing>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>varying vec2 vHighPrecisionZW;void main() {vec4 diffuseColor = vec4( 1.0 );#include <clipping_planes_fragment>#if DEPTH_PACKING == 3200diffuseColor.a = opacity;#endif#include <map_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <logdepthbuf_fragment>float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;#if DEPTH_PACKING == 3200gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );#elif DEPTH_PACKING == 3201gl_FragColor = packDepthToRGBA( fragCoordZ );#elif DEPTH_PACKING == 3202gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );#elif DEPTH_PACKING == 3203gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );#endif}`,v2=`#define DISTANCEvarying vec3 vWorldPosition;#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <batching_vertex>#include <skinbase_vertex>#include <morphinstance_vertex>#ifdef USE_DISPLACEMENTMAP#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinnormal_vertex>#endif#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <worldpos_vertex>#include <clipping_planes_vertex>vWorldPosition = worldPosition.xyz;}`,y2=`#define DISTANCEuniform vec3 referencePosition;uniform float nearDistance;uniform float farDistance;varying vec3 vWorldPosition;#include <common>#include <packing>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <clipping_planes_pars_fragment>void main () {vec4 diffuseColor = vec4( 1.0 );#include <clipping_planes_fragment>#include <map_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>float dist = length( vWorldPosition - referencePosition );dist = ( dist - nearDistance ) / ( farDistance - nearDistance );dist = saturate( dist );gl_FragColor = packDepthToRGBA( dist );}`,x2=`varying vec3 vWorldDirection;#include <common>void main() {vWorldDirection = transformDirection( position, modelMatrix );#include <begin_vertex>#include <project_vertex>}`,S2=`uniform sampler2D tEquirect;varying vec3 vWorldDirection;#include <common>void main() {vec3 direction = normalize( vWorldDirection );vec2 sampleUV = equirectUv( direction );gl_FragColor = texture2D( tEquirect, sampleUV );#include <tonemapping_fragment>#include <colorspace_fragment>}`,E2=`uniform float scale;attribute float lineDistance;varying float vLineDistance;#include <common>#include <uv_pars_vertex>#include <color_pars_vertex>#include <fog_pars_vertex>#include <morphtarget_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {vLineDistance = scale * lineDistance;#include <uv_vertex>#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>#include <fog_vertex>}`,_2=`uniform vec3 diffuse;uniform float opacity;uniform float dashSize;uniform float totalSize;varying float vLineDistance;#include <common>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <fog_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>if ( mod( vLineDistance, totalSize ) > dashSize ) {discard;}vec3 outgoingLight = vec3( 0.0 );#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>outgoingLight = diffuseColor.rgb;#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>}`,T2=`#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <envmap_pars_vertex>#include <color_pars_vertex>#include <fog_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <batching_vertex>#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#endif#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>#include <worldpos_vertex>#include <envmap_vertex>#include <fog_vertex>}`,b2=`uniform vec3 diffuse;uniform float opacity;#ifndef FLAT_SHADEDvarying vec3 vNormal;#endif#include <common>#include <dithering_pars_fragment>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <aomap_pars_fragment>#include <lightmap_pars_fragment>#include <envmap_common_pars_fragment>#include <envmap_pars_fragment>#include <fog_pars_fragment>#include <specularmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <specularmap_fragment>ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );#ifdef USE_LIGHTMAPvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;#elsereflectedLight.indirectDiffuse += vec3( 1.0 );#endif#include <aomap_fragment>reflectedLight.indirectDiffuse *= diffuseColor.rgb;vec3 outgoingLight = reflectedLight.indirectDiffuse;#include <envmap_fragment>#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>#include <dithering_fragment>}`,A2=`#define LAMBERTvarying vec3 vViewPosition;#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <envmap_pars_vertex>#include <color_pars_vertex>#include <fog_pars_vertex>#include <normal_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <shadowmap_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <batching_vertex>#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <normal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>vViewPosition = - mvPosition.xyz;#include <worldpos_vertex>#include <envmap_vertex>#include <shadowmap_vertex>#include <fog_vertex>}`,R2=`#define LAMBERTuniform vec3 diffuse;uniform vec3 emissive;uniform float opacity;#include <common>#include <packing>#include <dithering_pars_fragment>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <aomap_pars_fragment>#include <lightmap_pars_fragment>#include <emissivemap_pars_fragment>#include <envmap_common_pars_fragment>#include <envmap_pars_fragment>#include <fog_pars_fragment>#include <bsdfs>#include <lights_pars_begin>#include <normal_pars_fragment>#include <lights_lambert_pars_fragment>#include <shadowmap_pars_fragment>#include <bumpmap_pars_fragment>#include <normalmap_pars_fragment>#include <specularmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );vec3 totalEmissiveRadiance = emissive;#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <specularmap_fragment>#include <normal_fragment_begin>#include <normal_fragment_maps>#include <emissivemap_fragment>#include <lights_lambert_fragment>#include <lights_fragment_begin>#include <lights_fragment_maps>#include <lights_fragment_end>#include <aomap_fragment>vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;#include <envmap_fragment>#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>#include <dithering_fragment>}`,w2=`#define MATCAPvarying vec3 vViewPosition;#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <color_pars_vertex>#include <displacementmap_pars_vertex>#include <fog_pars_vertex>#include <normal_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <batching_vertex>#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <normal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>#include <fog_vertex>vViewPosition = - mvPosition.xyz;}`,M2=`#define MATCAPuniform vec3 diffuse;uniform float opacity;uniform sampler2D matcap;varying vec3 vViewPosition;#include <common>#include <dithering_pars_fragment>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <fog_pars_fragment>#include <normal_pars_fragment>#include <bumpmap_pars_fragment>#include <normalmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <normal_fragment_begin>#include <normal_fragment_maps>vec3 viewDir = normalize( vViewPosition );vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );vec3 y = cross( viewDir, x );vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;#ifdef USE_MATCAPvec4 matcapColor = texture2D( matcap, uv );#elsevec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );#endifvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>#include <dithering_fragment>}`,C2=`#define NORMAL#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )varying vec3 vViewPosition;#endif#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <normal_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <batching_vertex>#include <beginnormal_vertex>#include <morphinstance_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <normal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )vViewPosition = - mvPosition.xyz;#endif}`,L2=`#define NORMALuniform float opacity;#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )varying vec3 vViewPosition;#endif#include <packing>#include <uv_pars_fragment>#include <normal_pars_fragment>#include <bumpmap_pars_fragment>#include <normalmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );#include <clipping_planes_fragment>#include <logdepthbuf_fragment>#include <normal_fragment_begin>#include <normal_fragment_maps>gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );#ifdef OPAQUEgl_FragColor.a = 1.0;#endif}`,D2=`#define PHONGvarying vec3 vViewPosition;#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <envmap_pars_vertex>#include <color_pars_vertex>#include <fog_pars_vertex>#include <normal_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <shadowmap_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <color_vertex>#include <morphcolor_vertex>#include <batching_vertex>#include <beginnormal_vertex>#include <morphinstance_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <normal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>vViewPosition = - mvPosition.xyz;#include <worldpos_vertex>#include <envmap_vertex>#include <shadowmap_vertex>#include <fog_vertex>}`,I2=`#define PHONGuniform vec3 diffuse;uniform vec3 emissive;uniform vec3 specular;uniform float shininess;uniform float opacity;#include <common>#include <packing>#include <dithering_pars_fragment>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <aomap_pars_fragment>#include <lightmap_pars_fragment>#include <emissivemap_pars_fragment>#include <envmap_common_pars_fragment>#include <envmap_pars_fragment>#include <fog_pars_fragment>#include <bsdfs>#include <lights_pars_begin>#include <normal_pars_fragment>#include <lights_phong_pars_fragment>#include <shadowmap_pars_fragment>#include <bumpmap_pars_fragment>#include <normalmap_pars_fragment>#include <specularmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );vec3 totalEmissiveRadiance = emissive;#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <specularmap_fragment>#include <normal_fragment_begin>#include <normal_fragment_maps>#include <emissivemap_fragment>#include <lights_phong_fragment>#include <lights_fragment_begin>#include <lights_fragment_maps>#include <lights_fragment_end>#include <aomap_fragment>vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;#include <envmap_fragment>#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>#include <dithering_fragment>}`,N2=`#define STANDARDvarying vec3 vViewPosition;#ifdef USE_TRANSMISSIONvarying vec3 vWorldPosition;#endif#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <color_pars_vertex>#include <fog_pars_vertex>#include <normal_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <shadowmap_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <batching_vertex>#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <normal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>vViewPosition = - mvPosition.xyz;#include <worldpos_vertex>#include <shadowmap_vertex>#include <fog_vertex>#ifdef USE_TRANSMISSIONvWorldPosition = worldPosition.xyz;#endif}`,P2=`#define STANDARD#ifdef PHYSICAL#define IOR#define USE_SPECULAR#endifuniform vec3 diffuse;uniform vec3 emissive;uniform float roughness;uniform float metalness;uniform float opacity;#ifdef IORuniform float ior;#endif#ifdef USE_SPECULARuniform float specularIntensity;uniform vec3 specularColor;#ifdef USE_SPECULAR_COLORMAPuniform sampler2D specularColorMap;#endif#ifdef USE_SPECULAR_INTENSITYMAPuniform sampler2D specularIntensityMap;#endif#endif#ifdef USE_CLEARCOATuniform float clearcoat;uniform float clearcoatRoughness;#endif#ifdef USE_DISPERSIONuniform float dispersion;#endif#ifdef USE_IRIDESCENCEuniform float iridescence;uniform float iridescenceIOR;uniform float iridescenceThicknessMinimum;uniform float iridescenceThicknessMaximum;#endif#ifdef USE_SHEENuniform vec3 sheenColor;uniform float sheenRoughness;#ifdef USE_SHEEN_COLORMAPuniform sampler2D sheenColorMap;#endif#ifdef USE_SHEEN_ROUGHNESSMAPuniform sampler2D sheenRoughnessMap;#endif#endif#ifdef USE_ANISOTROPYuniform vec2 anisotropyVector;#ifdef USE_ANISOTROPYMAPuniform sampler2D anisotropyMap;#endif#endifvarying vec3 vViewPosition;#include <common>#include <packing>#include <dithering_pars_fragment>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <aomap_pars_fragment>#include <lightmap_pars_fragment>#include <emissivemap_pars_fragment>#include <iridescence_fragment>#include <cube_uv_reflection_fragment>#include <envmap_common_pars_fragment>#include <envmap_physical_pars_fragment>#include <fog_pars_fragment>#include <lights_pars_begin>#include <normal_pars_fragment>#include <lights_physical_pars_fragment>#include <transmission_pars_fragment>#include <shadowmap_pars_fragment>#include <bumpmap_pars_fragment>#include <normalmap_pars_fragment>#include <clearcoat_pars_fragment>#include <iridescence_pars_fragment>#include <roughnessmap_pars_fragment>#include <metalnessmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );vec3 totalEmissiveRadiance = emissive;#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <roughnessmap_fragment>#include <metalnessmap_fragment>#include <normal_fragment_begin>#include <normal_fragment_maps>#include <clearcoat_normal_fragment_begin>#include <clearcoat_normal_fragment_maps>#include <emissivemap_fragment>#include <lights_physical_fragment>#include <lights_fragment_begin>#include <lights_fragment_maps>#include <lights_fragment_end>#include <aomap_fragment>vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;#include <transmission_fragment>vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;#ifdef USE_SHEENfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;#endif#ifdef USE_CLEARCOATfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;#endif#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>#include <dithering_fragment>}`,O2=`#define TOONvarying vec3 vViewPosition;#include <common>#include <batching_pars_vertex>#include <uv_pars_vertex>#include <displacementmap_pars_vertex>#include <color_pars_vertex>#include <fog_pars_vertex>#include <normal_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <shadowmap_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <batching_vertex>#include <beginnormal_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <normal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <displacementmap_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <clipping_planes_vertex>vViewPosition = - mvPosition.xyz;#include <worldpos_vertex>#include <shadowmap_vertex>#include <fog_vertex>}`,U2=`#define TOONuniform vec3 diffuse;uniform vec3 emissive;uniform float opacity;#include <common>#include <packing>#include <dithering_pars_fragment>#include <color_pars_fragment>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <aomap_pars_fragment>#include <lightmap_pars_fragment>#include <emissivemap_pars_fragment>#include <gradientmap_pars_fragment>#include <fog_pars_fragment>#include <bsdfs>#include <lights_pars_begin>#include <normal_pars_fragment>#include <lights_toon_pars_fragment>#include <shadowmap_pars_fragment>#include <bumpmap_pars_fragment>#include <normalmap_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );vec3 totalEmissiveRadiance = emissive;#include <logdepthbuf_fragment>#include <map_fragment>#include <color_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>#include <normal_fragment_begin>#include <normal_fragment_maps>#include <emissivemap_fragment>#include <lights_toon_fragment>#include <lights_fragment_begin>#include <lights_fragment_maps>#include <lights_fragment_end>#include <aomap_fragment>vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>#include <dithering_fragment>}`,F2=`uniform float size;uniform float scale;#include <common>#include <color_pars_vertex>#include <fog_pars_vertex>#include <morphtarget_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>#ifdef USE_POINTS_UVvarying vec2 vUv;uniform mat3 uvTransform;#endifvoid main() {#ifdef USE_POINTS_UVvUv = ( uvTransform * vec3( uv, 1 ) ).xy;#endif#include <color_vertex>#include <morphinstance_vertex>#include <morphcolor_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <project_vertex>gl_PointSize = size;#ifdef USE_SIZEATTENUATIONbool isPerspective = isPerspectiveMatrix( projectionMatrix );if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );#endif#include <logdepthbuf_vertex>#include <clipping_planes_vertex>#include <worldpos_vertex>#include <fog_vertex>}`,k2=`uniform vec3 diffuse;uniform float opacity;#include <common>#include <color_pars_fragment>#include <map_particle_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <fog_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>vec3 outgoingLight = vec3( 0.0 );#include <logdepthbuf_fragment>#include <map_particle_fragment>#include <color_fragment>#include <alphatest_fragment>#include <alphahash_fragment>outgoingLight = diffuseColor.rgb;#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>#include <premultiplied_alpha_fragment>}`,B2=`#include <common>#include <batching_pars_vertex>#include <fog_pars_vertex>#include <morphtarget_pars_vertex>#include <skinning_pars_vertex>#include <logdepthbuf_pars_vertex>#include <shadowmap_pars_vertex>void main() {#include <batching_vertex>#include <beginnormal_vertex>#include <morphinstance_vertex>#include <morphnormal_vertex>#include <skinbase_vertex>#include <skinnormal_vertex>#include <defaultnormal_vertex>#include <begin_vertex>#include <morphtarget_vertex>#include <skinning_vertex>#include <project_vertex>#include <logdepthbuf_vertex>#include <worldpos_vertex>#include <shadowmap_vertex>#include <fog_vertex>}`,j2=`uniform vec3 color;uniform float opacity;#include <common>#include <packing>#include <fog_pars_fragment>#include <bsdfs>#include <lights_pars_begin>#include <logdepthbuf_pars_fragment>#include <shadowmap_pars_fragment>#include <shadowmask_pars_fragment>void main() {#include <logdepthbuf_fragment>gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>}`,V2=`uniform float rotation;uniform vec2 center;#include <common>#include <uv_pars_vertex>#include <fog_pars_vertex>#include <logdepthbuf_pars_vertex>#include <clipping_planes_pars_vertex>void main() {#include <uv_vertex>vec4 mvPosition = modelViewMatrix[ 3 ];vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );#ifndef USE_SIZEATTENUATIONbool isPerspective = isPerspectiveMatrix( projectionMatrix );if ( isPerspective ) scale *= - mvPosition.z;#endifvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;vec2 rotatedPosition;rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;mvPosition.xy += rotatedPosition;gl_Position = projectionMatrix * mvPosition;#include <logdepthbuf_vertex>#include <clipping_planes_vertex>#include <fog_vertex>}`,G2=`uniform vec3 diffuse;uniform float opacity;#include <common>#include <uv_pars_fragment>#include <map_pars_fragment>#include <alphamap_pars_fragment>#include <alphatest_pars_fragment>#include <alphahash_pars_fragment>#include <fog_pars_fragment>#include <logdepthbuf_pars_fragment>#include <clipping_planes_pars_fragment>void main() {vec4 diffuseColor = vec4( diffuse, opacity );#include <clipping_planes_fragment>vec3 outgoingLight = vec3( 0.0 );#include <logdepthbuf_fragment>#include <map_fragment>#include <alphamap_fragment>#include <alphatest_fragment>#include <alphahash_fragment>outgoingLight = diffuseColor.rgb;#include <opaque_fragment>#include <tonemapping_fragment>#include <colorspace_fragment>#include <fog_fragment>}`,wt={alphahash_fragment:uP,alphahash_pars_fragment:hP,alphamap_fragment:dP,alphamap_pars_fragment:fP,alphatest_fragment:mP,alphatest_pars_fragment:pP,aomap_fragment:gP,aomap_pars_fragment:vP,batching_pars_vertex:yP,batching_vertex:xP,begin_vertex:SP,beginnormal_vertex:EP,bsdfs:_P,iridescence_fragment:TP,bumpmap_pars_fragment:bP,clipping_planes_fragment:AP,clipping_planes_pars_fragment:RP,clipping_planes_pars_vertex:wP,clipping_planes_vertex:MP,color_fragment:CP,color_pars_fragment:LP,color_pars_vertex:DP,color_vertex:IP,common:NP,cube_uv_reflection_fragment:PP,defaultnormal_vertex:OP,displacementmap_pars_vertex:UP,displacementmap_vertex:FP,emissivemap_fragment:kP,emissivemap_pars_fragment:BP,colorspace_fragment:jP,colorspace_pars_fragment:VP,envmap_fragment:GP,envmap_common_pars_fragment:HP,envmap_pars_fragment:zP,envmap_pars_vertex:$P,envmap_physical_pars_fragment:nO,envmap_vertex:WP,fog_vertex:qP,fog_pars_vertex:YP,fog_fragment:KP,fog_pars_fragment:XP,gradientmap_pars_fragment:QP,lightmap_pars_fragment:ZP,lights_lambert_fragment:JP,lights_lambert_pars_fragment:eO,lights_pars_begin:tO,lights_toon_fragment:iO,lights_toon_pars_fragment:sO,lights_phong_fragment:rO,lights_phong_pars_fragment:aO,lights_physical_fragment:oO,lights_physical_pars_fragment:lO,lights_fragment_begin:cO,lights_fragment_maps:uO,lights_fragment_end:hO,logdepthbuf_fragment:dO,logdepthbuf_pars_fragment:fO,logdepthbuf_pars_vertex:mO,logdepthbuf_vertex:pO,map_fragment:gO,map_pars_fragment:vO,map_particle_fragment:yO,map_particle_pars_fragment:xO,metalnessmap_fragment:SO,metalnessmap_pars_fragment:EO,morphinstance_vertex:_O,morphcolor_vertex:TO,morphnormal_vertex:bO,morphtarget_pars_vertex:AO,morphtarget_vertex:RO,normal_fragment_begin:wO,normal_fragment_maps:MO,normal_pars_fragment:CO,normal_pars_vertex:LO,normal_vertex:DO,normalmap_pars_fragment:IO,clearcoat_normal_fragment_begin:NO,clearcoat_normal_fragment_maps:PO,clearcoat_pars_fragment:OO,iridescence_pars_fragment:UO,opaque_fragment:FO,packing:kO,premultiplied_alpha_fragment:BO,project_vertex:jO,dithering_fragment:VO,dithering_pars_fragment:GO,roughnessmap_fragment:HO,roughnessmap_pars_fragment:zO,shadowmap_pars_fragment:$O,shadowmap_pars_vertex:WO,shadowmap_vertex:qO,shadowmask_pars_fragment:YO,skinbase_vertex:KO,skinning_pars_vertex:XO,skinning_vertex:QO,skinnormal_vertex:ZO,specularmap_fragment:JO,specularmap_pars_fragment:e2,tonemapping_fragment:t2,tonemapping_pars_fragment:n2,transmission_fragment:i2,transmission_pars_fragment:s2,uv_pars_fragment:r2,uv_pars_vertex:a2,uv_vertex:o2,worldpos_vertex:l2,background_vert:c2,background_frag:u2,backgroundCube_vert:h2,backgroundCube_frag:d2,cube_vert:f2,cube_frag:m2,depth_vert:p2,depth_frag:g2,distanceRGBA_vert:v2,distanceRGBA_frag:y2,equirect_vert:x2,equirect_frag:S2,linedashed_vert:E2,linedashed_frag:_2,meshbasic_vert:T2,meshbasic_frag:b2,meshlambert_vert:A2,meshlambert_frag:R2,meshmatcap_vert:w2,meshmatcap_frag:M2,meshnormal_vert:C2,meshnormal_frag:L2,meshphong_vert:D2,meshphong_frag:I2,meshphysical_vert:N2,meshphysical_frag:P2,meshtoon_vert:O2,meshtoon_frag:U2,points_vert:F2,points_frag:k2,shadow_vert:B2,shadow_frag:j2,sprite_vert:V2,sprite_frag:G2},He={common:{diffuse:{value:new Xt(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Rt},alphaMap:{value:null},alphaMapTransform:{value:new Rt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Rt}},envmap:{envMap:{value:null},envMapRotation:{value:new Rt},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Rt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Rt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Rt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Rt},normalScale:{value:new Ht(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Rt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Rt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Rt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Rt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Xt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Xt(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Rt},alphaTest:{value:0},uvTransform:{value:new Rt}},sprite:{diffuse:{value:new Xt(16777215)},opacity:{value:1},center:{value:new Ht(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Rt},alphaMap:{value:null},alphaMapTransform:{value:new Rt},alphaTest:{value:0}}},Ws={basic:{uniforms:xi([He.common,He.specularmap,He.envmap,He.aomap,He.lightmap,He.fog]),vertexShader:wt.meshbasic_vert,fragmentShader:wt.meshbasic_frag},lambert:{uniforms:xi([He.common,He.specularmap,He.envmap,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.fog,He.lights,{emissive:{value:new Xt(0)}}]),vertexShader:wt.meshlambert_vert,fragmentShader:wt.meshlambert_frag},phong:{uniforms:xi([He.common,He.specularmap,He.envmap,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.fog,He.lights,{emissive:{value:new Xt(0)},specular:{value:new Xt(1118481)},shininess:{value:30}}]),vertexShader:wt.meshphong_vert,fragmentShader:wt.meshphong_frag},standard:{uniforms:xi([He.common,He.envmap,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.roughnessmap,He.metalnessmap,He.fog,He.lights,{emissive:{value:new Xt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:wt.meshphysical_vert,fragmentShader:wt.meshphysical_frag},toon:{uniforms:xi([He.common,He.aomap,He.lightmap,He.emissivemap,He.bumpmap,He.normalmap,He.displacementmap,He.gradientmap,He.fog,He.lights,{emissive:{value:new Xt(0)}}]),vertexShader:wt.meshtoon_vert,fragmentShader:wt.meshtoon_frag},matcap:{uniforms:xi([He.common,He.bumpmap,He.normalmap,He.displacementmap,He.fog,{matcap:{value:null}}]),vertexShader:wt.meshmatcap_vert,fragmentShader:wt.meshmatcap_frag},points:{uniforms:xi([He.points,He.fog]),vertexShader:wt.points_vert,fragmentShader:wt.points_frag},dashed:{uniforms:xi([He.common,He.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:wt.linedashed_vert,fragmentShader:wt.linedashed_frag},depth:{uniforms:xi([He.common,He.displacementmap]),vertexShader:wt.depth_vert,fragmentShader:wt.depth_frag},normal:{uniforms:xi([He.common,He.bumpmap,He.normalmap,He.displacementmap,{opacity:{value:1}}]),vertexShader:wt.meshnormal_vert,fragmentShader:wt.meshnormal_frag},sprite:{uniforms:xi([He.sprite,He.fog]),vertexShader:wt.sprite_vert,fragmentShader:wt.sprite_frag},background:{uniforms:{uvTransform:{value:new Rt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:wt.background_vert,fragmentShader:wt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Rt}},vertexShader:wt.backgroundCube_vert,fragmentShader:wt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:wt.cube_vert,fragmentShader:wt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:wt.equirect_vert,fragmentShader:wt.equirect_frag},distanceRGBA:{uniforms:xi([He.common,He.displacementmap,{referencePosition:{value:new me},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:wt.distanceRGBA_vert,fragmentShader:wt.distanceRGBA_frag},shadow:{uniforms:xi([He.lights,He.fog,{color:{value:new Xt(0)},opacity:{value:1}}]),vertexShader:wt.shadow_vert,fragmentShader:wt.shadow_frag}};Ws.physical={uniforms:xi([Ws.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Rt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Rt},clearcoatNormalScale:{value:new Ht(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Rt},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Rt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Rt},sheen:{value:0},sheenColor:{value:new Xt(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Rt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Rt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Rt},transmissionSamplerSize:{value:new Ht},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Rt},attenuationDistance:{value:0},attenuationColor:{value:new Xt(0)},specularColor:{value:new Xt(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Rt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Rt},anisotropyVector:{value:new Ht},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Rt}}]),vertexShader:wt.meshphysical_vert,fragmentShader:wt.meshphysical_frag};const pd={r:0,b:0,g:0},Ja=new Zs,H2=new xn;function z2(i,e,t,n,s,r,o){const c=new Xt(0);let h=r===!0?0:1,u,m,p=null,v=0,y=null;function x(A){let w=A.isScene===!0?A.background:null;return w&&w.isTexture&&(w=(A.backgroundBlurriness>0?t:e).get(w)),w}function T(A){let w=!1;const D=x(A);D===null?_(c,h):D&&D.isColor&&(_(D,1),w=!0);const O=i.xr.getEnvironmentBlendMode();O===",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,data:le}),x=null}const ne=new lR;ne.setAnimationLoop($),this.setAnimationLoop=function(K){X=K},this.dispose=function(){}}}const eo=new Zs,VF=new xn;function GF(i,e){function t(S,_){S.matrixAutoUpdate===!0&&S.updateMatrix(),_.value.copy(S.matrix)}function n(S,_){_.color.getRGB(S.fogColor.value,nR(i)),_.isFog?(S.fogNear.value=_.near,S.fogFar.value=_.far):_.isFogExp2&&(S.fogDensity.value=_.density)}function s(S,_,R,A,w){_.isMeshBasicMaterial||_.isMeshLambertMaterial?r(S,_):_.isMeshToonMaterial?(r(S,_),p(S,_)):_.isMeshPhongMaterial?(r(S,_),m(S,_)):_.isMeshStandardMaterial?(r(S,_),v(S,_),_.isMeshPhysicalMaterial&&y(S,_,w)):_.isMeshMatcapMaterial?(r(S,_),x(S,_)):_.isMeshDepthMaterial?r(S,_):_.isMeshDistanceMaterial?(r(S,_),T(S,_)):_.isMeshNormalMaterial?r(S,_):_.isLineBasicMaterial?(o(S,_),_.isLineDashedMaterial&&c(S,_)):_.isPointsMaterial?h(S,_,R,A):_.isSpriteMaterial?u(S,_):_.isShadowMaterial?(S.color.value.copy(_.color),S.opacity.value=_.opacity):_.isShaderMaterial&&(_.uniformsNeedUpdate=!1)}function r(S,_){S.opacity.value=_.opacity,_.color&&S.diffuse.value.copy(_.color),_.emissive&&S.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity),_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.bumpMap&&(S.bumpMap.value=_.bumpMap,t(_.bumpMap,S.bumpMapTransform),S.bumpScale.value=_.bumpScale,_.side===Di&&(S.bumpScale.value*=-1)),_.normalMap&&(S.normalMap.value=_.normalMap,t(_.normalMap,S.normalMapTransform),S.normalScale.value.copy(_.normalScale),_.side===Di&&S.normalScale.value.negate()),_.displacementMap&&(S.displacementMap.value=_.displacementMap,t(_.displacementMap,S.displacementMapTransform),S.displacementScale.value=_.displacementScale,S.displacementBias.value=_.displacementBias),_.emissiveMap&&(S.emissiveMap.value=_.emissiveMap,t(_.emissiveMap,S.emissiveMapTransform)),_.specularMap&&(S.specularMap.value=_.specularMap,t(_.specularMap,S.specularMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest);const R=e.get(_),A=R.envMap,w=R.envMapRotation;A&&(S.envMap.value=A,eo.copy(w),eo.x*=-1,eo.y*=-1,eo.z*=-1,A.isCubeTexture&&A.isRenderTargetTexture===!1&&(eo.y*=-1,eo.z*=-1),S.envMapRotation.value.setFromMatrix4(VF.makeRotationFromEuler(eo)),S.flipEnvMap.value=A.isCubeTexture&&A.isRenderTargetTexture===!1?-1:1,S.reflectivity.value=_.reflectivity,S.ior.value=_.ior,S.refractionRatio.value=_.refractionRatio),_.lightMap&&(S.lightMap.value=_.lightMap,S.lightMapIntensity.value=_.lightMapIntensity,t(_.lightMap,S.lightMapTransform)),_.aoMap&&(S.aoMap.value=_.aoMap,S.aoMapIntensity.value=_.aoMapIntensity,t(_.aoMap,S.aoMapTransform))}function o(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform))}function c(S,_){S.dashSize.value=_.dashSize,S.totalSize.value=_.dashSize+_.gapSize,S.scale.value=_.scale}function h(S,_,R,A){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.size.value=_.size*R,S.scale.value=A*.5,_.map&&(S.map.value=_.map,t(_.map,S.uvTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function u(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.rotation.value=_.rotation,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function m(S,_){S.specular.value.copy(_.specular),S.shininess.value=Math.max(_.shininess,1e-4)}function p(S,_){_.gradientMap&&(S.gradientMap.value=_.gradientMap)}function v(S,_){S.metalness.value=_.metalness,_.metalnessMap&&(S.metalnessMap.value=_.metalnessMap,t(_.metalnessMap,S.metalnessMapTransform)),S.roughness.value=_.roughness,_.roughnessMap&&(S.roughnessMap.value=_.roughnessMap,t(_.roughnessMap,S.roughnessMapTransform)),_.envMap&&(S.envMapIntensity.value=_.envMapIntensity)}function y(S,_,R){S.ior.value=_.ior,_.sheen>0&&(S.sheenColor.value.copy(_.sheenColor).multiplyScalar(_.sheen),S.sheenRoughness.value=_.sheenRoughness,_.sheenColorMap&&(S.sheenColorMap.value=_.sheenColorMap,t(_.sheenColorMap,S.sheenColorMapTransform)),_.sheenRoughnessMap&&(S.sheenRoughnessMap.value=_.sheenRoughnessMap,t(_.sheenRoughnessMap,S.sheenRoughnessMapTransform))),_.clearcoat>0&&(S.clearcoat.value=_.clearcoat,S.clearcoatRoughness.value=_.clearcoatRoughness,_.clearcoatMap&&(S.clearcoatMap.value=_.clearcoatMap,t(_.clearcoatMap,S.clearcoatMapTransform)),_.clearcoatRoughnessMap&&(S.clearcoatRoughnessMap.value=_.clearcoatRoughnessMap,t(_.clearcoatRoughnessMap,S.clearcoatRoughnessMapTransform)),_.clearcoatNormalMap&&(S.clearcoatNormalMap.value=_.clearcoatNormalMap,t(_.clearcoatNormalMap,S.clearcoatNormalMapTransform),S.clearcoatNormalScale.value.copy(_.clearcoatNormalScale),_.side===Di&&S.clearcoatNormalScale.value.negate())),_.dispersion>0&&(S.dispersion.value=_.dispersion),_.iridescence>0&&(S.iridescence.value=_.iridescence,S.iridescenceIOR.value=_.iridescenceIOR,S.iridescenceThicknessMinimum.value=_.iridescenceThicknessRange[0],S.iridescenceThicknessMaximum.value=_.iridescenceThicknessRange[1],_.iridescenceMap&&(S.iridescenceMap.value=_.iridescenceMap,t(_.iridescenceMap,S.iridescenceMapTransform)),_.iridescenceThicknessMap&&(S.iridescenceThicknessMap.value=_.iridescenceThicknessMap,t(_.iridescenceThicknessMap,S.iridescenceThicknessMapTransform))),_.transmission>0&&(S.transmission.value=_.transmission,S.transmissionSamplerMap.value=R.texture,S.transmissionSamplerSize.value.set(R.width,R.height),_.transmissionMap&&(S.transmissionMap.value=_.transmissionMap,t(_.transmissionMap,S.transmissionMapTransform)),S.thickness.value=_.thickness,_.thicknessMap&&(S.thicknessMap.value=_.thicknessMap,t(_.thicknessMap,S.thicknessMapTransform)),S.attenuationDistance.value=_.attenuationDistance,S.attenuationColor.value.copy(_.attenuationColor)),_.anisotropy>0&&(S.anisotropyVector.value.set(_.anisotropy*Math.cos(_.anisotropyRotation),_.anisotropy*Math.sin(_.anisotropyRotation)),_.anisotropyMap&&(S.anisotropyMap.value=_.anisotropyMap,t(_.anisotropyMap,S.anisotropyMapTransform))),S.specularIntensity.value=_.specularIntensity,S.specularColor.value.copy(_.specularColor),_.specularColorMap&&(S.specularColorMap.value=_.specularColorMap,t(_.specularColorMap,S.specularColorMapTransform)),_.specularIntensityMap&&(S.specularIntensityMap.value=_.specularIntensityMap,t(_.specularIntensityMap,S.specularIntensityMapTransform))}function x(S,_){_.matcap&&(S.matcap.value=_.matcap)}function T(S,_){const R=e.get(_).light;S.referencePosition.value.setFromMatrixPosition(R.matrixWorld),S.nearDistance.value=R.shadow.camera.near,S.farDistance.value=R.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function HF(i,e,t,n){let s={},r={},o=[];const c=i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS);function h(R,A){const w=A.program;n.uniformBlockBinding(R,w)}function u(R,A){let w=s[R.id];w===void 0&&(x(R),w=m(R),s[R.id]=w,R.addEventListener(",
      "url": "https://pov-reality.com/,data:le}),x=null}const ne=new lR;ne.setAnimationLoop($),this.setAnimationLoop=function(K){X=K},this.dispose=function(){}}}const eo=new Zs,VF=new xn;function GF(i,e){function t(S,_){S.matrixAutoUpdate===!0&&S.updateMatrix(),_.value.copy(S.matrix)}function n(S,_){_.color.getRGB(S.fogColor.value,nR(i)),_.isFog?(S.fogNear.value=_.near,S.fogFar.value=_.far):_.isFogExp2&&(S.fogDensity.value=_.density)}function s(S,_,R,A,w){_.isMeshBasicMaterial||_.isMeshLambertMaterial?r(S,_):_.isMeshToonMaterial?(r(S,_),p(S,_)):_.isMeshPhongMaterial?(r(S,_),m(S,_)):_.isMeshStandardMaterial?(r(S,_),v(S,_),_.isMeshPhysicalMaterial&&y(S,_,w)):_.isMeshMatcapMaterial?(r(S,_),x(S,_)):_.isMeshDepthMaterial?r(S,_):_.isMeshDistanceMaterial?(r(S,_),T(S,_)):_.isMeshNormalMaterial?r(S,_):_.isLineBasicMaterial?(o(S,_),_.isLineDashedMaterial&&c(S,_)):_.isPointsMaterial?h(S,_,R,A):_.isSpriteMaterial?u(S,_):_.isShadowMaterial?(S.color.value.copy(_.color),S.opacity.value=_.opacity):_.isShaderMaterial&&(_.uniformsNeedUpdate=!1)}function r(S,_){S.opacity.value=_.opacity,_.color&&S.diffuse.value.copy(_.color),_.emissive&&S.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity),_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.bumpMap&&(S.bumpMap.value=_.bumpMap,t(_.bumpMap,S.bumpMapTransform),S.bumpScale.value=_.bumpScale,_.side===Di&&(S.bumpScale.value*=-1)),_.normalMap&&(S.normalMap.value=_.normalMap,t(_.normalMap,S.normalMapTransform),S.normalScale.value.copy(_.normalScale),_.side===Di&&S.normalScale.value.negate()),_.displacementMap&&(S.displacementMap.value=_.displacementMap,t(_.displacementMap,S.displacementMapTransform),S.displacementScale.value=_.displacementScale,S.displacementBias.value=_.displacementBias),_.emissiveMap&&(S.emissiveMap.value=_.emissiveMap,t(_.emissiveMap,S.emissiveMapTransform)),_.specularMap&&(S.specularMap.value=_.specularMap,t(_.specularMap,S.specularMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest);const R=e.get(_),A=R.envMap,w=R.envMapRotation;A&&(S.envMap.value=A,eo.copy(w),eo.x*=-1,eo.y*=-1,eo.z*=-1,A.isCubeTexture&&A.isRenderTargetTexture===!1&&(eo.y*=-1,eo.z*=-1),S.envMapRotation.value.setFromMatrix4(VF.makeRotationFromEuler(eo)),S.flipEnvMap.value=A.isCubeTexture&&A.isRenderTargetTexture===!1?-1:1,S.reflectivity.value=_.reflectivity,S.ior.value=_.ior,S.refractionRatio.value=_.refractionRatio),_.lightMap&&(S.lightMap.value=_.lightMap,S.lightMapIntensity.value=_.lightMapIntensity,t(_.lightMap,S.lightMapTransform)),_.aoMap&&(S.aoMap.value=_.aoMap,S.aoMapIntensity.value=_.aoMapIntensity,t(_.aoMap,S.aoMapTransform))}function o(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform))}function c(S,_){S.dashSize.value=_.dashSize,S.totalSize.value=_.dashSize+_.gapSize,S.scale.value=_.scale}function h(S,_,R,A){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.size.value=_.size*R,S.scale.value=A*.5,_.map&&(S.map.value=_.map,t(_.map,S.uvTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function u(S,_){S.diffuse.value.copy(_.color),S.opacity.value=_.opacity,S.rotation.value=_.rotation,_.map&&(S.map.value=_.map,t(_.map,S.mapTransform)),_.alphaMap&&(S.alphaMap.value=_.alphaMap,t(_.alphaMap,S.alphaMapTransform)),_.alphaTest>0&&(S.alphaTest.value=_.alphaTest)}function m(S,_){S.specular.value.copy(_.specular),S.shininess.value=Math.max(_.shininess,1e-4)}function p(S,_){_.gradientMap&&(S.gradientMap.value=_.gradientMap)}function v(S,_){S.metalness.value=_.metalness,_.metalnessMap&&(S.metalnessMap.value=_.metalnessMap,t(_.metalnessMap,S.metalnessMapTransform)),S.roughness.value=_.roughness,_.roughnessMap&&(S.roughnessMap.value=_.roughnessMap,t(_.roughnessMap,S.roughnessMapTransform)),_.envMap&&(S.envMapIntensity.value=_.envMapIntensity)}function y(S,_,R){S.ior.value=_.ior,_.sheen>0&&(S.sheenColor.value.copy(_.sheenColor).multiplyScalar(_.sheen),S.sheenRoughness.value=_.sheenRoughness,_.sheenColorMap&&(S.sheenColorMap.value=_.sheenColorMap,t(_.sheenColorMap,S.sheenColorMapTransform)),_.sheenRoughnessMap&&(S.sheenRoughnessMap.value=_.sheenRoughnessMap,t(_.sheenRoughnessMap,S.sheenRoughnessMapTransform))),_.clearcoat>0&&(S.clearcoat.value=_.clearcoat,S.clearcoatRoughness.value=_.clearcoatRoughness,_.clearcoatMap&&(S.clearcoatMap.value=_.clearcoatMap,t(_.clearcoatMap,S.clearcoatMapTransform)),_.clearcoatRoughnessMap&&(S.clearcoatRoughnessMap.value=_.clearcoatRoughnessMap,t(_.clearcoatRoughnessMap,S.clearcoatRoughnessMapTransform)),_.clearcoatNormalMap&&(S.clearcoatNormalMap.value=_.clearcoatNormalMap,t(_.clearcoatNormalMap,S.clearcoatNormalMapTransform),S.clearcoatNormalScale.value.copy(_.clearcoatNormalScale),_.side===Di&&S.clearcoatNormalScale.value.negate())),_.dispersion>0&&(S.dispersion.value=_.dispersion),_.iridescence>0&&(S.iridescence.value=_.iridescence,S.iridescenceIOR.value=_.iridescenceIOR,S.iridescenceThicknessMinimum.value=_.iridescenceThicknessRange[0],S.iridescenceThicknessMaximum.value=_.iridescenceThicknessRange[1],_.iridescenceMap&&(S.iridescenceMap.value=_.iridescenceMap,t(_.iridescenceMap,S.iridescenceMapTransform)),_.iridescenceThicknessMap&&(S.iridescenceThicknessMap.value=_.iridescenceThicknessMap,t(_.iridescenceThicknessMap,S.iridescenceThicknessMapTransform))),_.transmission>0&&(S.transmission.value=_.transmission,S.transmissionSamplerMap.value=R.texture,S.transmissionSamplerSize.value.set(R.width,R.height),_.transmissionMap&&(S.transmissionMap.value=_.transmissionMap,t(_.transmissionMap,S.transmissionMapTransform)),S.thickness.value=_.thickness,_.thicknessMap&&(S.thicknessMap.value=_.thicknessMap,t(_.thicknessMap,S.thicknessMapTransform)),S.attenuationDistance.value=_.attenuationDistance,S.attenuationColor.value.copy(_.attenuationColor)),_.anisotropy>0&&(S.anisotropyVector.value.set(_.anisotropy*Math.cos(_.anisotropyRotation),_.anisotropy*Math.sin(_.anisotropyRotation)),_.anisotropyMap&&(S.anisotropyMap.value=_.anisotropyMap,t(_.anisotropyMap,S.anisotropyMapTransform))),S.specularIntensity.value=_.specularIntensity,S.specularColor.value.copy(_.specularColor),_.specularColorMap&&(S.specularColorMap.value=_.specularColorMap,t(_.specularColorMap,S.specularColorMapTransform)),_.specularIntensityMap&&(S.specularIntensityMap.value=_.specularIntensityMap,t(_.specularIntensityMap,S.specularIntensityMapTransform))}function x(S,_){_.matcap&&(S.matcap.value=_.matcap)}function T(S,_){const R=e.get(_).light;S.referencePosition.value.setFromMatrixPosition(R.matrixWorld),S.nearDistance.value=R.shadow.camera.near,S.farDistance.value=R.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function HF(i,e,t,n){let s={},r={},o=[];const c=i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS);function h(R,A){const w=A.program;n.uniformBlockBinding(R,w)}function u(R,A){let w=s[R.id];w===void 0&&(x(R),w=m(R),s[R.id]=w,R.addEventListener(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,ae.receiveShadow)),de.isMeshGouraudMaterial&&de.envMap!==null&&(gi.envMap.value=We,gi.flipEnvMap.value=We.isCubeTexture&&We.isRenderTargetTexture===!1?-1:1),de.isMeshStandardMaterial&&de.envMap===null&&re.environment!==null&&(gi.envMapIntensity.value=re.environmentIntensity),pi&&(nn.setValue(J,",
      "url": "https://pov-reality.com/,ae.receiveShadow)),de.isMeshGouraudMaterial&&de.envMap!==null&&(gi.envMap.value=We,gi.flipEnvMap.value=We.isCubeTexture&&We.isRenderTargetTexture===!1?-1:1),de.isMeshStandardMaterial&&de.envMap===null&&re.environment!==null&&(gi.envMapIntensity.value=re.environmentIntensity),pi&&(nn.setValue(J,",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_))).catch(r=>(Qt.warn(`[decrypter]: WebCrypto Error, disable WebCrypto API, ${r.name}: ${r.message}`),this.onWebCryptoError(e,t,n,s)))}onWebCryptoError(e,t,n,s){const r=this.enableSoftwareAES;if(r){this.useSoftware=!0,this.logEnabled=!0,this.softwareDecrypt(e,t,n,s);const o=this.flush();if(o)return o.buffer}throw new Error(",
      "url": "https://pov-reality.com/))).catch(r=>(Qt.warn(`[decrypter]: WebCrypto Error, disable WebCrypto API, ${r.name}: ${r.message}`),this.onWebCryptoError(e,t,n,s)))}onWebCryptoError(e,t,n,s){const r=this.enableSoftwareAES;if(r){this.useSoftware=!0,this.logEnabled=!0,this.softwareDecrypt(e,t,n,s);const o=this.flush();if(o)return o.buffer}throw new Error(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_APIC",
      "url": "https://pov-reality.com/APIC",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_s why we built POV-Reality from the ground up to serve creators who understand that the future of content is immersive, interactive, and intensely personal.<_p>\n      \n      <h2>Why POV Content Is Reshaping Digital Media<_h2>\n      <p>Here",
      "url": "https://pov-reality.com/s why we built POV-Reality from the ground up to serve creators who understand that the future of content is immersive, interactive, and intensely personal.</p>            <h2>Why POV Content Is Reshaping Digital Media</h2>      <p>Here",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_t need a Hollywood budget to create compelling interactive VR stories. Here are the tools successful creators use:<_p>\n      \n      <h3>Content Creation Tools:<_h3>\n      <ul>\n        <li><strong>Twine:<_strong> Free tool for creating branching narratives<_li>\n        <li><strong>Articulate Storyline:<_strong> Professional interactive content creation<_li>\n        <li><strong>Unity 3D:<_strong> Full VR development environment<_li>\n        <li><strong>Unreal Engine:<_strong> Advanced VR story development<_li>\n      <_ul>\n      \n      <h3>VR-Specific Platforms:<_h3>\n      <ul>\n        <li><strong>Mozilla Hubs:<_strong> Web-based VR storytelling<_li>\n        <li><strong>VRChat:<_strong> Social VR narrative experiences<_li>\n        <li><strong>Oculus Platform:<_strong> Professional VR story distribution<_li>\n        <li><strong>SteamVR:<_strong> PC-based VR content platform<_li>\n      <_ul>\n      \n      <h2>The Future of Interactive VR Storytelling<_h2>\n      <p>Interactive VR storytelling is evolving rapidly, with several exciting trends emerging:<_p>\n      \n      <h3>AI-Powered Narratives<_h3>\n      <p>AI will enable stories that adapt in real-time to viewer preferences, creating truly personalized narrative experiences.<_p>\n      \n      <h3>Persistent Story Worlds<_h3>\n      <p>Virtual environments that continue evolving even when viewers aren",
      "url": "https://pov-reality.com/t need a Hollywood budget to create compelling interactive VR stories. Here are the tools successful creators use:</p>            <h3>Content Creation Tools:</h3>      <ul>        <li><strong>Twine:</strong> Free tool for creating branching narratives</li>        <li><strong>Articulate Storyline:</strong> Professional interactive content creation</li>        <li><strong>Unity 3D:</strong> Full VR development environment</li>        <li><strong>Unreal Engine:</strong> Advanced VR story development</li>      </ul>            <h3>VR-Specific Platforms:</h3>      <ul>        <li><strong>Mozilla Hubs:</strong> Web-based VR storytelling</li>        <li><strong>VRChat:</strong> Social VR narrative experiences</li>        <li><strong>Oculus Platform:</strong> Professional VR story distribution</li>        <li><strong>SteamVR:</strong> PC-based VR content platform</li>      </ul>            <h2>The Future of Interactive VR Storytelling</h2>      <p>Interactive VR storytelling is evolving rapidly, with several exciting trends emerging:</p>            <h3>AI-Powered Narratives</h3>      <p>AI will enable stories that adapt in real-time to viewer preferences, creating truly personalized narrative experiences.</p>            <h3>Persistent Story Worlds</h3>      <p>Virtual environments that continue evolving even when viewers aren",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_The $50 Billion POV Entertainment Revolution: Why First-Person Content Is Reshaping Every Industry",
      "url": "https://pov-reality.com/The $50 Billion POV Entertainment Revolution: Why First-Person Content Is Reshaping Every Industry",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_s what the data reveals:<_p>\n      \n      <ul>\n        <li><strong>Market Size:<_strong> $2.8 billion in 2023, projected to reach $47.5 billion by 2030<_li>\n        <li><strong>User Growth:<_strong> 340% increase in POV content consumption year-over-year<_li>\n        <li><strong>Revenue Per User:<_strong> POV content generates 4.3x more revenue than traditional video content<_li>\n        <li><strong>Investment Surge:<_strong> $12 billion in venture capital funding for POV entertainment startups in 2023<_li>\n        <li><strong>Creator Earnings:<_strong> Top POV creators earn 8x more than comparable traditional content creators<_li>\n      <_ul>\n      \n      <h2>Why POV Entertainment Is Rewiring Human Psychology<_h2>\n      <p>POV entertainment succeeds because it exploits fundamental aspects of human psychology that traditional media simply cannot access:<_p>\n      \n      <h3>The Embodiment Effect<_h3>\n      <p>When viewers experience content from a first-person perspective, their brains undergo ",
      "url": "https://pov-reality.com/s what the data reveals:</p>            <ul>        <li><strong>Market Size:</strong> $2.8 billion in 2023, projected to reach $47.5 billion by 2030</li>        <li><strong>User Growth:</strong> 340% increase in POV content consumption year-over-year</li>        <li><strong>Revenue Per User:</strong> POV content generates 4.3x more revenue than traditional video content</li>        <li><strong>Investment Surge:</strong> $12 billion in venture capital funding for POV entertainment startups in 2023</li>        <li><strong>Creator Earnings:</strong> Top POV creators earn 8x more than comparable traditional content creators</li>      </ul>            <h2>Why POV Entertainment Is Rewiring Human Psychology</h2>      <p>POV entertainment succeeds because it exploits fundamental aspects of human psychology that traditional media simply cannot access:</p>            <h3>The Embodiment Effect</h3>      <p>When viewers experience content from a first-person perspective, their brains undergo ",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_s how to capitalize on the POV entertainment revolution:<_p>\n      \n      <h3>For Content Creators:<_h3>\n      <ul>\n        <li><strong>Start Now:<_strong> Begin creating POV content in your area of expertise<_li>\n        <li><strong>Invest in Quality:<_strong> POV content demands higher production values<_li>\n        <li><strong>Build Community:<_strong> POV audiences are more engaged and loyal<_li>\n        <li><strong>Diversify Revenue:<_strong> Combine content sales, experiences, and brand partnerships<_li>\n      <_ul>\n      \n      <h3>For Businesses:<_h3>\n      <ul>\n        <li><strong>Pilot Programs:<_strong> Test POV content for training and marketing<_li>\n        <li><strong>Partnership Opportunities:<_strong> Collaborate with POV creators in your industry<_li>\n        <li><strong>Technology Investment:<_strong> Invest in POV content creation capabilities<_li>\n        <li><strong>Market Research:<_strong> Understand how POV content affects your customers<_li>\n      <_ul>\n      \n      <h3>For Investors:<_h3>\n      <ul>\n        <li><strong>Platform Opportunities:<_strong> Invest in POV content platforms and tools<_li>\n        <li><strong>Technology Solutions:<_strong> Fund companies solving POV content challenges<_li>\n        <li><strong>Creator Support:<_strong> Invest in POV creator development and support<_li>\n        <li><strong>Infrastructure:<_strong> Support the technology infrastructure powering POV content<_li>\n      <_ul>\n      \n      <h2>The POV Entertainment Revolution Is Just Beginning<_h2>\n      <p>We",
      "url": "https://pov-reality.com/s how to capitalize on the POV entertainment revolution:</p>            <h3>For Content Creators:</h3>      <ul>        <li><strong>Start Now:</strong> Begin creating POV content in your area of expertise</li>        <li><strong>Invest in Quality:</strong> POV content demands higher production values</li>        <li><strong>Build Community:</strong> POV audiences are more engaged and loyal</li>        <li><strong>Diversify Revenue:</strong> Combine content sales, experiences, and brand partnerships</li>      </ul>            <h3>For Businesses:</h3>      <ul>        <li><strong>Pilot Programs:</strong> Test POV content for training and marketing</li>        <li><strong>Partnership Opportunities:</strong> Collaborate with POV creators in your industry</li>        <li><strong>Technology Investment:</strong> Invest in POV content creation capabilities</li>        <li><strong>Market Research:</strong> Understand how POV content affects your customers</li>      </ul>            <h3>For Investors:</h3>      <ul>        <li><strong>Platform Opportunities:</strong> Invest in POV content platforms and tools</li>        <li><strong>Technology Solutions:</strong> Fund companies solving POV content challenges</li>        <li><strong>Creator Support:</strong> Invest in POV creator development and support</li>        <li><strong>Infrastructure:</strong> Support the technology infrastructure powering POV content</li>      </ul>            <h2>The POV Entertainment Revolution Is Just Beginning</h2>      <p>We",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_})]})}),f.jsx(o4,{})]})),Gt=Zt.create({baseURL:Dn.API_URL,headers:{",
      "url": "https://pov-reality.com/})]})}),f.jsx(o4,{})]})),Gt=Zt.create({baseURL:Dn.API_URL,headers:{",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_API Error:",
      "url": "https://pov-reality.com/API Error:",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://pov-reality.com/assets/index-R4SVrWIC.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_tccperfapi",
      "url": "https://pov-reality.com/tccperfapi",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_),2),a=i[0],u={schemaId:i[1],data:[]};Object.values(o).forEach((function(t){if(t.events.length>10)for(var e=t.events.length_10,n=0;n<e;n++)u.data.push(N(t,{events:t.events.slice(10*n,10*n+10)}));else u.data.push(t)})),e._sendBatchCallback(u,{apiKey:a,isFlushing:e._isFlushing})}catch(t){I(",
      "url": "https://pov-reality.com/),2),a=i[0],u={schemaId:i[1],data:[]};Object.values(o).forEach((function(t){if(t.events.length>10)for(var e=t.events.length/10,n=0;n<e;n++)u.data.push(N(t,{events:t.events.slice(10*n,10*n+10)}));else u.data.push(t)})),e._sendBatchCallback(u,{apiKey:a,isFlushing:e._isFlushing})}catch(t){I(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,value:function(t,e,n){var r=n.apiKey,o=n.schemaId,i=n.global,a=n.contextVersion,u=n.businessContext,c=",
      "url": "https://pov-reality.com/,value:function(t,e,n){var r=n.apiKey,o=n.schemaId,i=n.global,a=n.contextVersion,u=n.businessContext,c=",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,xt=function(t,e){var n=e.apiKey,r=e.isFlushing;!function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.queryParams,i=r.payload,a=r.requestHeaders,u=r.credentials,c=r.sendAsBeacon,f=void 0!==c&&c,l=N({},a),y=i?JSON.stringify(i):null;if(f&&wt&&!l.Authorization&&",
      "url": "https://pov-reality.com/,xt=function(t,e){var n=e.apiKey,r=e.isFlushing;!function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.queryParams,i=r.payload,a=r.requestHeaders,u=r.credentials,c=r.sendAsBeacon,f=void 0!==c&&c,l=N({},a),y=i?JSON.stringify(i):null;if(f&&wt&&!l.Authorization&&",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_),sccApiKey:",
      "url": "https://pov-reality.com/),sccApiKey:",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,rigorApiKey:",
      "url": "https://pov-reality.com/,rigorApiKey:",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,dr=function(t){var e,n,r=t.globalSchemaId,o=t.businessContext,i=t.events,a=t.webContext,u=t.routing,c=void 0===u?{}:u,f=c.eventBusApiKey,s=c.hasConversion,l=c.targets;if($(i)&&0!==i.length){for(var p,y=W(),v=0;v<i.length;v++)i[v].data=N({eventCreationTimestamp:y},i[v].data);Jn.updateContext(),Yn.updateContext(),n={schemaId:r||(p=null===(e=Jn.context.site)||void 0===e?void 0:e.privateLabelId,p?",
      "url": "https://pov-reality.com/,dr=function(t){var e,n,r=t.globalSchemaId,o=t.businessContext,i=t.events,a=t.webContext,u=t.routing,c=void 0===u?{}:u,f=c.eventBusApiKey,s=c.hasConversion,l=c.targets;if($(i)&&0!==i.length){for(var p,y=W(),v=0;v<i.length;v++)i[v].data=N({eventCreationTimestamp:y},i[v].data);Jn.updateContext(),Yn.updateContext(),n={schemaId:r||(p=null===(e=Jn.context.site)||void 0===e?void 0:e.privateLabelId,p?",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_),global:Jn.context,businessContext:o,events:i,webContext:N(Yn.context,a),routing:{eventBusApiKey:f||b(",
      "url": "https://pov-reality.com/),global:Jn.context,businessContext:o,events:i,webContext:N(Yn.context,a),routing:{eventBusApiKey:f||b(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_sccApiKey",
      "url": "https://pov-reality.com/sccApiKey",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_,value:function(t){this.internal.hasFired||(dr({globalSchemaId:this._getGlobalSchemaId(),businessContext:this._getBusinessContext(),events:this._getEvents(t),webContext:this._getWebContext(t),routing:{eventBusApiKey:this._getApiKey(),hasConversion:this._hasConversion(),targets:this.targets}}),this.internal.hasFired=!0)}},{key:",
      "url": "https://pov-reality.com/,value:function(t){this.internal.hasFired||(dr({globalSchemaId:this._getGlobalSchemaId(),businessContext:this._getBusinessContext(),events:this._getEvents(t),webContext:this._getWebContext(t),routing:{eventBusApiKey:this._getApiKey(),hasConversion:this._hasConversion(),targets:this.targets}}),this.internal.hasFired=!0)}},{key:",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax__getApiKey",
      "url": "https://pov-reality.com/_getApiKey",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax__getApiKey",
      "url": "https://pov-reality.com/_getApiKey",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_apiKey",
      "url": "https://pov-reality.com/apiKey",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_],callback:function(t){var e=t.schemaId,n=t.global,r=t.businessContext,o=t.events,i=t.routing,a=i.eventBusApiKey,u=i.hasConversion,c=i.globalContextVersion;Ct.pushEvent({apiKey:a,businessContext:r,contextVersion:c,schemaId:e,global:n,events:o},u)}}})),r=Ht(",
      "url": "https://pov-reality.com/],callback:function(t){var e=t.schemaId,n=t.global,r=t.businessContext,o=t.events,i=t.routing,a=i.eventBusApiKey,u=i.hasConversion,c=i.globalContextVersion;Ct.pushEvent({apiKey:a,businessContext:r,contextVersion:c,schemaId:e,global:n,events:o},u)}}})),r=Ht(",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax__getApiKey",
      "url": "https://pov-reality.com/_getApiKey",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    },
    {
      "type": "ajax_endpoint",
      "id": "ajax_rigorApiKey",
      "url": "https://pov-reality.com/rigorApiKey",
      "method": "POST",
      "parameters": 1,
      "context": "Found in https://img1.wsimg.com/traffic-assets/js/tccl.min.js"
    }
  ],
  "all_test_results": [],
  "recommendations": [
    "Continue regular security monitoring and testing",
    "Implement security best practices and secure coding guidelines"
  ]
}